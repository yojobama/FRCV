//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Manager : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Manager(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Manager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Manager obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Manager() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libFRCVLibPINVOKE.delete_Manager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Manager(string logFile) : this(libFRCVLibPINVOKE.new_Manager__SWIG_0(logFile), true) {
    if (libFRCVLibPINVOKE.SWIGPendingException.Pending) throw libFRCVLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Manager() : this(libFRCVLibPINVOKE.new_Manager__SWIG_1(), true) {
  }

  public VectorInt GetAllSinks() {
    VectorInt ret = new VectorInt(libFRCVLibPINVOKE.Manager_GetAllSinks(swigCPtr), true);
    return ret;
  }

  public VectorInt GetAllSources() {
    VectorInt ret = new VectorInt(libFRCVLibPINVOKE.Manager_GetAllSources(swigCPtr), true);
    return ret;
  }

  public VectorCameraHardwareInfo EnumerateAvailableCameras() {
    VectorCameraHardwareInfo ret = new VectorCameraHardwareInfo(libFRCVLibPINVOKE.Manager_EnumerateAvailableCameras(swigCPtr), true);
    return ret;
  }

  public bool BindSourceToSink(int sourceId, int sinkId) {
    bool ret = libFRCVLibPINVOKE.Manager_BindSourceToSink(swigCPtr, sourceId, sinkId);
    return ret;
  }

  public bool UnbindSourceFromSink(int sinkId) {
    bool ret = libFRCVLibPINVOKE.Manager_UnbindSourceFromSink(swigCPtr, sinkId);
    return ret;
  }

  public int CreateCameraSource(CameraHardwareInfo info) {
    int ret = libFRCVLibPINVOKE.Manager_CreateCameraSource__SWIG_0(swigCPtr, CameraHardwareInfo.getCPtr(info));
    if (libFRCVLibPINVOKE.SWIGPendingException.Pending) throw libFRCVLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int CreateCameraSource(CameraHardwareInfo info, int id) {
    int ret = libFRCVLibPINVOKE.Manager_CreateCameraSource__SWIG_1(swigCPtr, CameraHardwareInfo.getCPtr(info), id);
    if (libFRCVLibPINVOKE.SWIGPendingException.Pending) throw libFRCVLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int CreateVideoFileSource(string path, int fps) {
    int ret = libFRCVLibPINVOKE.Manager_CreateVideoFileSource__SWIG_0(swigCPtr, path, fps);
    if (libFRCVLibPINVOKE.SWIGPendingException.Pending) throw libFRCVLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int CreateVideoFileSource(string path, int fps, int id) {
    int ret = libFRCVLibPINVOKE.Manager_CreateVideoFileSource__SWIG_1(swigCPtr, path, fps, id);
    if (libFRCVLibPINVOKE.SWIGPendingException.Pending) throw libFRCVLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int CreateImageFileSource(string path) {
    int ret = libFRCVLibPINVOKE.Manager_CreateImageFileSource__SWIG_0(swigCPtr, path);
    if (libFRCVLibPINVOKE.SWIGPendingException.Pending) throw libFRCVLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int CreateImageFileSource(string path, int id) {
    int ret = libFRCVLibPINVOKE.Manager_CreateImageFileSource__SWIG_1(swigCPtr, path, id);
    if (libFRCVLibPINVOKE.SWIGPendingException.Pending) throw libFRCVLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int CreateApriltagSink() {
    int ret = libFRCVLibPINVOKE.Manager_CreateApriltagSink__SWIG_0(swigCPtr);
    return ret;
  }

  public int CreateApriltagSink(int id) {
    int ret = libFRCVLibPINVOKE.Manager_CreateApriltagSink__SWIG_1(swigCPtr, id);
    return ret;
  }

  public int CreateObjectDetectionSink() {
    int ret = libFRCVLibPINVOKE.Manager_CreateObjectDetectionSink__SWIG_0(swigCPtr);
    return ret;
  }

  public int CreateObjectDetectionSink(int id) {
    int ret = libFRCVLibPINVOKE.Manager_CreateObjectDetectionSink__SWIG_1(swigCPtr, id);
    return ret;
  }

  public int CreateRecordingSink(int sourceId) {
    int ret = libFRCVLibPINVOKE.Manager_CreateRecordingSink(swigCPtr, sourceId);
    return ret;
  }

  public void StartAllSources() {
    libFRCVLibPINVOKE.Manager_StartAllSources(swigCPtr);
  }

  public void StopAllSources() {
    libFRCVLibPINVOKE.Manager_StopAllSources(swigCPtr);
  }

  public bool StopSourceById(int sourceId) {
    bool ret = libFRCVLibPINVOKE.Manager_StopSourceById(swigCPtr, sourceId);
    return ret;
  }

  public bool StartSourceById(int sourceId) {
    bool ret = libFRCVLibPINVOKE.Manager_StartSourceById(swigCPtr, sourceId);
    return ret;
  }

  public void StartAllSinks() {
    libFRCVLibPINVOKE.Manager_StartAllSinks(swigCPtr);
  }

  public void StopAllSinks() {
    libFRCVLibPINVOKE.Manager_StopAllSinks(swigCPtr);
  }

  public bool StartSinkById(int sinkId) {
    bool ret = libFRCVLibPINVOKE.Manager_StartSinkById(swigCPtr, sinkId);
    return ret;
  }

  public bool StopSinkById(int sinkId) {
    bool ret = libFRCVLibPINVOKE.Manager_StopSinkById(swigCPtr, sinkId);
    return ret;
  }

  public string GetAllSinkStatus() {
    string ret = libFRCVLibPINVOKE.Manager_GetAllSinkStatus(swigCPtr);
    return ret;
  }

  public string GetSinkStatusById(int sinkId) {
    string ret = libFRCVLibPINVOKE.Manager_GetSinkStatusById(swigCPtr, sinkId);
    return ret;
  }

  public string GetSinkResult(int sinkId) {
    string ret = libFRCVLibPINVOKE.Manager_GetSinkResult(swigCPtr, sinkId);
    return ret;
  }

  public string GetAllSinkResults() {
    string ret = libFRCVLibPINVOKE.Manager_GetAllSinkResults(swigCPtr);
    return ret;
  }

  public int CreateCameraCalibrationSink(int height, int width) {
    int ret = libFRCVLibPINVOKE.Manager_CreateCameraCalibrationSink(swigCPtr, height, width);
    return ret;
  }

  public void BindSourceToCalibrationSink(int sourceId) {
    libFRCVLibPINVOKE.Manager_BindSourceToCalibrationSink(swigCPtr, sourceId);
  }

  public void CameraCalibrationSinkGrabFrame(int sinkId) {
    libFRCVLibPINVOKE.Manager_CameraCalibrationSinkGrabFrame(swigCPtr, sinkId);
  }

  public CameraCalibrationResult GetCameraCalibrationResults(int sinkId) {
    CameraCalibrationResult ret = new CameraCalibrationResult(libFRCVLibPINVOKE.Manager_GetCameraCalibrationResults(swigCPtr, sinkId), true);
    return ret;
  }

  public int GetMemoryUsageBytes() {
    int ret = libFRCVLibPINVOKE.Manager_GetMemoryUsageBytes(swigCPtr);
    return ret;
  }

  public int GetCPUUsage() {
    int ret = libFRCVLibPINVOKE.Manager_GetCPUUsage(swigCPtr);
    return ret;
  }

  public int GetCpuTemperature() {
    int ret = libFRCVLibPINVOKE.Manager_GetCpuTemperature(swigCPtr);
    return ret;
  }

  public int GetDiskUsage() {
    int ret = libFRCVLibPINVOKE.Manager_GetDiskUsage(swigCPtr);
    return ret;
  }

  public bool EnableSinkPreview(int sinkId) {
    bool ret = libFRCVLibPINVOKE.Manager_EnableSinkPreview(swigCPtr, sinkId);
    return ret;
  }

  public bool DisableSinkPreview(int sinkId) {
    bool ret = libFRCVLibPINVOKE.Manager_DisableSinkPreview(swigCPtr, sinkId);
    return ret;
  }

  public Image8U GetPreviewImage(int sinkId) {
    Image8U ret = new Image8U(libFRCVLibPINVOKE.Manager_GetPreviewImage(swigCPtr, sinkId), true);
    return ret;
  }

}
