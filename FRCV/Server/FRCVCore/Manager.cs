//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Manager : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Manager(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Manager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Manager obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Manager() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libFRCVLibPINVOKE.delete_Manager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Manager(string logFile) : this(libFRCVLibPINVOKE.new_Manager__SWIG_0(logFile), true) {
    if (libFRCVLibPINVOKE.SWIGPendingException.Pending) throw libFRCVLibPINVOKE.SWIGPendingException.Retrieve();
  }

  public Manager() : this(libFRCVLibPINVOKE.new_Manager__SWIG_1(), true) {
  }

  public VectorInt getAllSinks() {
    VectorInt ret = new VectorInt(libFRCVLibPINVOKE.Manager_getAllSinks(swigCPtr), true);
    return ret;
  }

  public VectorInt getAllSources() {
    VectorInt ret = new VectorInt(libFRCVLibPINVOKE.Manager_getAllSources(swigCPtr), true);
    return ret;
  }

  public VectorCameraHardwareInfo enumerateAvailableCameras() {
    VectorCameraHardwareInfo ret = new VectorCameraHardwareInfo(libFRCVLibPINVOKE.Manager_enumerateAvailableCameras(swigCPtr), true);
    return ret;
  }

  public bool bindSourceToSink(int sourceId, int sinkId) {
    bool ret = libFRCVLibPINVOKE.Manager_bindSourceToSink(swigCPtr, sourceId, sinkId);
    return ret;
  }

  public bool unbindSourceFromSink(int sinkId) {
    bool ret = libFRCVLibPINVOKE.Manager_unbindSourceFromSink(swigCPtr, sinkId);
    return ret;
  }

  public int createCameraSource(CameraHardwareInfo info) {
    int ret = libFRCVLibPINVOKE.Manager_createCameraSource(swigCPtr, CameraHardwareInfo.getCPtr(info));
    if (libFRCVLibPINVOKE.SWIGPendingException.Pending) throw libFRCVLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int createVideoFileSource(string path, int fps) {
    int ret = libFRCVLibPINVOKE.Manager_createVideoFileSource(swigCPtr, path, fps);
    if (libFRCVLibPINVOKE.SWIGPendingException.Pending) throw libFRCVLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int createImageFileSource(string path) {
    int ret = libFRCVLibPINVOKE.Manager_createImageFileSource(swigCPtr, path);
    if (libFRCVLibPINVOKE.SWIGPendingException.Pending) throw libFRCVLibPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int createApriltagSink() {
    int ret = libFRCVLibPINVOKE.Manager_createApriltagSink(swigCPtr);
    return ret;
  }

  public int createObjectDetectionSink() {
    int ret = libFRCVLibPINVOKE.Manager_createObjectDetectionSink(swigCPtr);
    return ret;
  }

  public int createRecordingSink(int sourceId) {
    int ret = libFRCVLibPINVOKE.Manager_createRecordingSink(swigCPtr, sourceId);
    return ret;
  }

  public void startAllSources() {
    libFRCVLibPINVOKE.Manager_startAllSources(swigCPtr);
  }

  public void stopAllSources() {
    libFRCVLibPINVOKE.Manager_stopAllSources(swigCPtr);
  }

  public bool stopSourceById(int sourceId) {
    bool ret = libFRCVLibPINVOKE.Manager_stopSourceById(swigCPtr, sourceId);
    return ret;
  }

  public bool startSourceById(int sourceId) {
    bool ret = libFRCVLibPINVOKE.Manager_startSourceById(swigCPtr, sourceId);
    return ret;
  }

  public void startAllSinks() {
    libFRCVLibPINVOKE.Manager_startAllSinks(swigCPtr);
  }

  public void stopAllSinks() {
    libFRCVLibPINVOKE.Manager_stopAllSinks(swigCPtr);
  }

  public bool startSinkById(int sinkId) {
    bool ret = libFRCVLibPINVOKE.Manager_startSinkById(swigCPtr, sinkId);
    return ret;
  }

  public bool stopSinkById(int sinkId) {
    bool ret = libFRCVLibPINVOKE.Manager_stopSinkById(swigCPtr, sinkId);
    return ret;
  }

  public string getAllSinkStatus() {
    string ret = libFRCVLibPINVOKE.Manager_getAllSinkStatus(swigCPtr);
    return ret;
  }

  public string getSinkStatusById(int sinkId) {
    string ret = libFRCVLibPINVOKE.Manager_getSinkStatusById(swigCPtr, sinkId);
    return ret;
  }

  public string getSinkResult(int sinkId) {
    string ret = libFRCVLibPINVOKE.Manager_getSinkResult(swigCPtr, sinkId);
    return ret;
  }

  public string getAllSinkResults() {
    string ret = libFRCVLibPINVOKE.Manager_getAllSinkResults(swigCPtr);
    return ret;
  }

  public int createCameraCalibrationSink(int height, int width) {
    int ret = libFRCVLibPINVOKE.Manager_createCameraCalibrationSink(swigCPtr, height, width);
    return ret;
  }

  public void bindSourceToCalibrationSink(int sourceId) {
    libFRCVLibPINVOKE.Manager_bindSourceToCalibrationSink(swigCPtr, sourceId);
  }

  public void cameraCalibrationSinkGrabFrame(int sinkId) {
    libFRCVLibPINVOKE.Manager_cameraCalibrationSinkGrabFrame(swigCPtr, sinkId);
  }

  public CameraCalibrationResult getCameraCalibrationResults(int sinkId) {
    CameraCalibrationResult ret = new CameraCalibrationResult(libFRCVLibPINVOKE.Manager_getCameraCalibrationResults(swigCPtr, sinkId), true);
    return ret;
  }

}
