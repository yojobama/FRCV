//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class FrameSpec : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FrameSpec(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FrameSpec obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(FrameSpec obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~FrameSpec() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          FRCVCorePINVOKE.delete_FrameSpec(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public FrameSpec(int height, int width, int type) : this(FRCVCorePINVOKE.new_FrameSpec(height, width, type), true) {
  }

  public int getHeight() {
    int ret = FRCVCorePINVOKE.FrameSpec_getHeight(swigCPtr);
    return ret;
  }

  public void setHeight(int h) {
    FRCVCorePINVOKE.FrameSpec_setHeight(swigCPtr, h);
  }

  public int getWidth() {
    int ret = FRCVCorePINVOKE.FrameSpec_getWidth(swigCPtr);
    return ret;
  }

  public void setWidth(int w) {
    FRCVCorePINVOKE.FrameSpec_setWidth(swigCPtr, w);
  }

  public int getType() {
    int ret = FRCVCorePINVOKE.FrameSpec_getType(swigCPtr);
    return ret;
  }

  public void setType(int t) {
    FRCVCorePINVOKE.FrameSpec_setType(swigCPtr, t);
  }

}
