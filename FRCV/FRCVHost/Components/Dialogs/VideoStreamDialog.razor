@using MudBlazor
@using FRCVHost.Services
@inject IWebRTCService WebRTCService
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@implements IAsyncDisposable

<MudDialog DisableSidePadding="true" ClassContent="px-0">
    <DialogContent>
        <MudContainer Style="max-height: 80vh; overflow-y: auto">
            <div class="video-container">
                <video id="@_videoElementId" autoplay playsinline></video>
            </div>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="CloseDialog">Close</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .video-container {
        width: 100%;
        min-height: 480px;
        background-color: #000;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    video {
        max-width: 100%;
        max-height: 80vh;
    }
</style>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public int SourceId { get; set; }

    private string _videoElementId = $"video-{Guid.NewGuid()}";
    private string _sessionId;
    private IJSObjectReference _module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/webrtc.js");
                _sessionId = await WebRTCService.CreateStreamingSessionAsync(SourceId);
                await _module.InvokeVoidAsync("initializeWebRTC", _videoElementId, _sessionId);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error starting video stream: {ex.Message}", Severity.Error);
            }
        }
    }

    private void CloseDialog()
    {
        MudDialog.Close();
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_module != null)
            {
                await _module.DisposeAsync();
            }
            if (_sessionId != null)
            {
                await WebRTCService.StopStreamingSessionAsync(SourceId);
            }
        }
        catch
        {
            // Ignore disposal errors
        }
    }
}