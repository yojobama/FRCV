@using MudBlazor
@page "/calibration"
@using FRCVHost.Services
@inject IVisionManagerService VisionManager
@inject ISnackbar Snackbar

<MudText Typo="Typo.h4" Class="mb-4">Camera Calibration</MudText>

<MudGrid>
    <MudItem xs="12" md="6">
        <MudPaper Class="pa-4">
            <MudForm Model="@_model">
                <MudSelect T="int?" Label="Source" @bind-Value="_model.SelectedSourceId">
                    @foreach (var source in _sources)
                    {
                        <MudSelectItem Value="@source.Id">Source @source.Id</MudSelectItem>
                    }
                </MudSelect>
                <MudNumericField @bind-Value="_model.Width" Label="Calibration Width" Min="1" />
                <MudNumericField @bind-Value="_model.Height" Label="Calibration Height" Min="1" />
                <MudButton Color="Color.Primary" OnClick="StartCalibration" 
                          Disabled="@(_model.SelectedSourceId == null || _currentSinkId != null)" 
                          Class="mt-4">
                    Start Calibration
                </MudButton>
            </MudForm>
        </MudPaper>
    </MudItem>

    @if (_currentSinkId != null)
    {
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4">
                <MudText>Captured Frames: @_capturedFrames</MudText>
                <MudButton Color="Color.Primary" OnClick="CaptureFrame" Class="mr-2">
                    Capture Frame
                </MudButton>
                <MudButton Color="Color.Secondary" OnClick="FinishCalibration">
                    Finish Calibration
                </MudButton>
            </MudPaper>
        </MudItem>
    }

    @if (!string.IsNullOrEmpty(_calibrationResult))
    {
        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6">Calibration Results</MudText>
                <MudText>@_calibrationResult</MudText>
            </MudPaper>
        </MudItem>
    }
</MudGrid>

@code {
    private class CalibrationModel
    {
        public int? SelectedSourceId { get; set; }
        public int Width { get; set; } = 640;
        public int Height { get; set; } = 480;
    }

    private CalibrationModel _model = new();
    private List<SourceInfo> _sources = new();
    private int? _currentSinkId;
    private int _capturedFrames;
    private string _calibrationResult;

    protected override async Task OnInitializedAsync()
    {
        // In a real implementation, get the sources from the service
        // For now it's just placeholder data
        _sources = new List<SourceInfo>();
    }

    private async Task StartCalibration()
    {
        if (_model.SelectedSourceId == null) return;

        try
        {
            _currentSinkId = await VisionManager.CreateCameraCalibrationSinkAsync(_model.Height, _model.Width);
            await VisionManager.BindSourceToCalibrationSinkAsync(_model.SelectedSourceId.Value);
            _capturedFrames = 0;
            Snackbar.Add("Calibration started. Capture at least 10 frames from different angles.", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error starting calibration: {ex.Message}", Severity.Error);
        }
    }

    private async Task CaptureFrame()
    {
        if (_currentSinkId == null) return;

        try
        {
            await VisionManager.CameraCalibrationGrabFrameAsync(_currentSinkId.Value);
            _capturedFrames++;
            Snackbar.Add($"Frame captured. Total frames: {_capturedFrames}", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error capturing frame: {ex.Message}", Severity.Error);
        }
    }

    private async Task FinishCalibration()
    {
        if (_currentSinkId == null) return;

        try
        {
            if (_capturedFrames < 10)
            {
                Snackbar.Add("Please capture at least 10 frames before finishing calibration.", Severity.Warning);
                return;
            }

            _calibrationResult = await VisionManager.GetCameraCalibrationResultsAsync(_currentSinkId.Value);
            _currentSinkId = null;
            _capturedFrames = 0;
            Snackbar.Add("Calibration completed successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error finishing calibration: {ex.Message}", Severity.Error);
        }
    }
}