@page "/sources"
@using FRCVHost.Components.Dialogs
@using FRCVHost.Services
@using MudBlazor
@inject IVisionManagerService VisionManager
@inject IDialogService DialogService

<MudText Typo="Typo.h4" Class="mb-4">Video Sources</MudText>

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h6" Class="mb-4">Available Sources</MudText>
            <MudButton Color="Color.Primary" OnClick="OpenAddSourceDialog" Class="mb-4">Add Source</MudButton>

            <MudTable Items="@_sources" Dense="true" Hover="true" Bordered="true">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID">@context.Id</MudTd>
                    <MudTd DataLabel="Type">@context.Type</MudTd>
                    <MudTd DataLabel="Status">@context.Status</MudTd>
                    <MudTd>
                        @if (context.Status == "Stopped")
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" Color="Color.Success"
                                           OnClick="@(() => StartSource(context.Id))" />
                        }
                        else
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Stop" Color="Color.Error"
                                           OnClick="@(() => StopSource(context.Id))" />
                        }
                        <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Info"
                                       OnClick="@(() => OpenPreview(context.Id))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private List<SourceInfo> _sources = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshSources();
    }

    private async Task RefreshSources()
    {
        // In a real implementation, this would be populated from the service
        // For now it's just placeholder data until we implement the source tracking
        _sources = new List<SourceInfo>();
    }

    private async Task OpenAddSourceDialog()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium };
        var dialog = await DialogService.ShowAsync<AddSourceDialog>("Add Source", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshSources();
        }
    }

    private async Task StartSource(int sourceId)
    {
        await VisionManager.StartSourceAsync(sourceId);
        await RefreshSources();
    }

    private async Task StopSource(int sourceId)
    {
        await VisionManager.StopSourceAsync(sourceId);
        await RefreshSources();
    }

    private async Task OpenPreview(int sourceId)
    {
        // TODO: Implement WebRTC preview
    }
}