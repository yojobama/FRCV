/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040300
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_libFRCVLib(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_libFRCVLib(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_libFRCVLib(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "Manager.h"
#include "CameraCalibrationResult.h"
#include "Frame.h"


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(int capacity){
        std::vector< int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN int std_vector_Sl_int_Sg__getitemcopy(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg__getitem(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__setitem(std::vector< int > *self,int index,int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__AddRange(std::vector< int > *self,std::vector< int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__GetRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Insert(std::vector< int > *self,int index,int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__InsertRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveAt(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__Repeat(int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< int >(count, value);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_0(std::vector< int > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_1(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__SetRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Contains(std::vector< int > *self,int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_int_Sg__IndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_int_Sg__LastIndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Remove(std::vector< int > *self,int const &value){
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< Log > *new_std_vector_Sl_Log_Sg___SWIG_2(int capacity){
        std::vector< Log >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Log >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Log std_vector_Sl_Log_Sg__getitemcopy(std::vector< Log > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< Log >::value_type const &std_vector_Sl_Log_Sg__getitem(std::vector< Log > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Log_Sg__setitem(std::vector< Log > *self,int index,Log const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Log_Sg__AddRange(std::vector< Log > *self,std::vector< Log > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Log > *std_vector_Sl_Log_Sg__GetRange(std::vector< Log > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Log >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Log_Sg__Insert(std::vector< Log > *self,int index,Log const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Log_Sg__InsertRange(std::vector< Log > *self,int index,std::vector< Log > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Log_Sg__RemoveAt(std::vector< Log > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Log_Sg__RemoveRange(std::vector< Log > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Log > *std_vector_Sl_Log_Sg__Repeat(Log const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Log >(count, value);
      }
SWIGINTERN void std_vector_Sl_Log_Sg__Reverse__SWIG_0(std::vector< Log > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Log_Sg__Reverse__SWIG_1(std::vector< Log > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Log_Sg__SetRange(std::vector< Log > *self,int index,std::vector< Log > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< CameraHardwareInfo > *new_std_vector_Sl_CameraHardwareInfo_Sg___SWIG_2(int capacity){
        std::vector< CameraHardwareInfo >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< CameraHardwareInfo >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN CameraHardwareInfo std_vector_Sl_CameraHardwareInfo_Sg__getitemcopy(std::vector< CameraHardwareInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< CameraHardwareInfo >::value_type const &std_vector_Sl_CameraHardwareInfo_Sg__getitem(std::vector< CameraHardwareInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CameraHardwareInfo_Sg__setitem(std::vector< CameraHardwareInfo > *self,int index,CameraHardwareInfo const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CameraHardwareInfo_Sg__AddRange(std::vector< CameraHardwareInfo > *self,std::vector< CameraHardwareInfo > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< CameraHardwareInfo > *std_vector_Sl_CameraHardwareInfo_Sg__GetRange(std::vector< CameraHardwareInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< CameraHardwareInfo >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_CameraHardwareInfo_Sg__Insert(std::vector< CameraHardwareInfo > *self,int index,CameraHardwareInfo const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CameraHardwareInfo_Sg__InsertRange(std::vector< CameraHardwareInfo > *self,int index,std::vector< CameraHardwareInfo > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CameraHardwareInfo_Sg__RemoveAt(std::vector< CameraHardwareInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CameraHardwareInfo_Sg__RemoveRange(std::vector< CameraHardwareInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< CameraHardwareInfo > *std_vector_Sl_CameraHardwareInfo_Sg__Repeat(CameraHardwareInfo const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< CameraHardwareInfo >(count, value);
      }
SWIGINTERN void std_vector_Sl_CameraHardwareInfo_Sg__Reverse__SWIG_0(std::vector< CameraHardwareInfo > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_CameraHardwareInfo_Sg__Reverse__SWIG_1(std::vector< CameraHardwareInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_CameraHardwareInfo_Sg__SetRange(std::vector< CameraHardwareInfo > *self,int index,std::vector< CameraHardwareInfo > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< Frame > *new_std_vector_Sl_Frame_Sg___SWIG_2(int capacity){
        std::vector< Frame >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Frame >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Frame std_vector_Sl_Frame_Sg__getitemcopy(std::vector< Frame > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< Frame >::value_type const &std_vector_Sl_Frame_Sg__getitem(std::vector< Frame > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Frame_Sg__setitem(std::vector< Frame > *self,int index,Frame const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Frame_Sg__AddRange(std::vector< Frame > *self,std::vector< Frame > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Frame > *std_vector_Sl_Frame_Sg__GetRange(std::vector< Frame > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Frame >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Frame_Sg__Insert(std::vector< Frame > *self,int index,Frame const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Frame_Sg__InsertRange(std::vector< Frame > *self,int index,std::vector< Frame > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Frame_Sg__RemoveAt(std::vector< Frame > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Frame_Sg__RemoveRange(std::vector< Frame > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Frame > *std_vector_Sl_Frame_Sg__Repeat(Frame const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Frame >(count, value);
      }
SWIGINTERN void std_vector_Sl_Frame_Sg__Reverse__SWIG_0(std::vector< Frame > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Frame_Sg__Reverse__SWIG_1(std::vector< Frame > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Frame_Sg__SetRange(std::vector< Frame > *self,int index,std::vector< Frame > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< FrameSpec > *new_std_vector_Sl_FrameSpec_Sg___SWIG_2(int capacity){
        std::vector< FrameSpec >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< FrameSpec >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN FrameSpec std_vector_Sl_FrameSpec_Sg__getitemcopy(std::vector< FrameSpec > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< FrameSpec >::value_type const &std_vector_Sl_FrameSpec_Sg__getitem(std::vector< FrameSpec > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_FrameSpec_Sg__setitem(std::vector< FrameSpec > *self,int index,FrameSpec const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_FrameSpec_Sg__AddRange(std::vector< FrameSpec > *self,std::vector< FrameSpec > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< FrameSpec > *std_vector_Sl_FrameSpec_Sg__GetRange(std::vector< FrameSpec > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< FrameSpec >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_FrameSpec_Sg__Insert(std::vector< FrameSpec > *self,int index,FrameSpec const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_FrameSpec_Sg__InsertRange(std::vector< FrameSpec > *self,int index,std::vector< FrameSpec > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_FrameSpec_Sg__RemoveAt(std::vector< FrameSpec > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_FrameSpec_Sg__RemoveRange(std::vector< FrameSpec > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< FrameSpec > *std_vector_Sl_FrameSpec_Sg__Repeat(FrameSpec const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< FrameSpec >(count, value);
      }
SWIGINTERN void std_vector_Sl_FrameSpec_Sg__Reverse__SWIG_0(std::vector< FrameSpec > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_FrameSpec_Sg__Reverse__SWIG_1(std::vector< FrameSpec > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_FrameSpec_Sg__SetRange(std::vector< FrameSpec > *self,int index,std::vector< FrameSpec > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_CameraHardwareInfo_name_set(void * jarg1, const char * jarg2) {
  CameraHardwareInfo *arg1 = (CameraHardwareInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (CameraHardwareInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_CameraHardwareInfo_name_get(void * jarg1) {
  const char * jresult ;
  CameraHardwareInfo *arg1 = (CameraHardwareInfo *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (CameraHardwareInfo *)jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CameraHardwareInfo_path_set(void * jarg1, const char * jarg2) {
  CameraHardwareInfo *arg1 = (CameraHardwareInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (CameraHardwareInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->path = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_CameraHardwareInfo_path_get(void * jarg1) {
  const char * jresult ;
  CameraHardwareInfo *arg1 = (CameraHardwareInfo *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (CameraHardwareInfo *)jarg1; 
  result = (std::string *) & ((arg1)->path);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CameraHardwareInfo() {
  void * jresult ;
  CameraHardwareInfo *result = 0 ;
  
  result = (CameraHardwareInfo *)new CameraHardwareInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CameraHardwareInfo(void * jarg1) {
  CameraHardwareInfo *arg1 = (CameraHardwareInfo *) 0 ;
  
  arg1 = (CameraHardwareInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image8U_width_set(void * jarg1, int jarg2) {
  Image8U *arg1 = (Image8U *) 0 ;
  int arg2 ;
  
  arg1 = (Image8U *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image8U_width_get(void * jarg1) {
  int jresult ;
  Image8U *arg1 = (Image8U *) 0 ;
  int result;
  
  arg1 = (Image8U *)jarg1; 
  result = (int) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image8U_height_set(void * jarg1, int jarg2) {
  Image8U *arg1 = (Image8U *) 0 ;
  int arg2 ;
  
  arg1 = (Image8U *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image8U_height_get(void * jarg1) {
  int jresult ;
  Image8U *arg1 = (Image8U *) 0 ;
  int result;
  
  arg1 = (Image8U *)jarg1; 
  result = (int) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image8U_stride_set(void * jarg1, int jarg2) {
  Image8U *arg1 = (Image8U *) 0 ;
  int arg2 ;
  
  arg1 = (Image8U *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->stride = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Image8U_stride_get(void * jarg1) {
  int jresult ;
  Image8U *arg1 = (Image8U *) 0 ;
  int result;
  
  arg1 = (Image8U *)jarg1; 
  result = (int) ((arg1)->stride);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image8U_buf_set(void * jarg1, void * jarg2) {
  Image8U *arg1 = (Image8U *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  arg1 = (Image8U *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->buf = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Image8U_buf_get(void * jarg1) {
  void * jresult ;
  Image8U *arg1 = (Image8U *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (Image8U *)jarg1; 
  result = (uint8_t *) ((arg1)->buf);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Image8U() {
  void * jresult ;
  Image8U *result = 0 ;
  
  result = (Image8U *)new Image8U();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Image8U(void * jarg1) {
  Image8U *arg1 = (Image8U *) 0 ;
  
  arg1 = (Image8U *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Manager__SWIG_0(const char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  Manager *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (Manager *)new Manager(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Manager__SWIG_1() {
  void * jresult ;
  Manager *result = 0 ;
  
  result = (Manager *)new Manager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Manager(void * jarg1) {
  Manager *arg1 = (Manager *) 0 ;
  
  arg1 = (Manager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Manager_GetAllSinks(void * jarg1) {
  void * jresult ;
  Manager *arg1 = (Manager *) 0 ;
  std::vector< int > result;
  
  arg1 = (Manager *)jarg1; 
  result = (arg1)->GetAllSinks();
  jresult = new std::vector< int >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Manager_GetAllSources(void * jarg1) {
  void * jresult ;
  Manager *arg1 = (Manager *) 0 ;
  std::vector< int > result;
  
  arg1 = (Manager *)jarg1; 
  result = (arg1)->GetAllSources();
  jresult = new std::vector< int >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Manager_EnumerateAvailableCameras(void * jarg1) {
  void * jresult ;
  Manager *arg1 = (Manager *) 0 ;
  std::vector< CameraHardwareInfo > result;
  
  arg1 = (Manager *)jarg1; 
  result = (arg1)->EnumerateAvailableCameras();
  jresult = new std::vector< CameraHardwareInfo >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Manager_BindSourceToSink(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Manager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->BindSourceToSink(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Manager_UnbindSourceFromSink(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Manager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->UnbindSourceFromSink(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Manager_CreateCameraSource__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  CameraHardwareInfo arg2 ;
  CameraHardwareInfo *argp2 ;
  int result;
  
  arg1 = (Manager *)jarg1; 
  argp2 = (CameraHardwareInfo *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CameraHardwareInfo", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->CreateCameraSource(SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Manager_CreateCameraSource__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  CameraHardwareInfo arg2 ;
  int arg3 ;
  CameraHardwareInfo *argp2 ;
  int result;
  
  arg1 = (Manager *)jarg1; 
  argp2 = (CameraHardwareInfo *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CameraHardwareInfo", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->CreateCameraSource(SWIG_STD_MOVE(arg2),arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Manager_CreateVideoFileSource__SWIG_0(void * jarg1, const char * jarg2, int jarg3) {
  int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  std::string arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Manager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->CreateVideoFileSource(SWIG_STD_MOVE(arg2),arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Manager_CreateVideoFileSource__SWIG_1(void * jarg1, const char * jarg2, int jarg3, int jarg4) {
  int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  std::string arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (Manager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->CreateVideoFileSource(SWIG_STD_MOVE(arg2),arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Manager_CreateImageFileSource__SWIG_0(void * jarg1, const char * jarg2) {
  int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  std::string arg2 ;
  int result;
  
  arg1 = (Manager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (int)(arg1)->CreateImageFileSource(SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Manager_CreateImageFileSource__SWIG_1(void * jarg1, const char * jarg2, int jarg3) {
  int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  std::string arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Manager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->CreateImageFileSource(SWIG_STD_MOVE(arg2),arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Manager_CreateApriltagSink__SWIG_0(void * jarg1) {
  int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int result;
  
  arg1 = (Manager *)jarg1; 
  result = (int)(arg1)->CreateApriltagSink();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Manager_CreateApriltagSink__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Manager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->CreateApriltagSink(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Manager_CreateObjectDetectionSink__SWIG_0(void * jarg1) {
  int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int result;
  
  arg1 = (Manager *)jarg1; 
  result = (int)(arg1)->CreateObjectDetectionSink();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Manager_CreateObjectDetectionSink__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Manager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->CreateObjectDetectionSink(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Manager_CreateRecordingSink(void * jarg1, int jarg2) {
  int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Manager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->CreateRecordingSink(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Manager_StartAllSources(void * jarg1) {
  Manager *arg1 = (Manager *) 0 ;
  
  arg1 = (Manager *)jarg1; 
  (arg1)->StartAllSources();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Manager_StopAllSources(void * jarg1) {
  Manager *arg1 = (Manager *) 0 ;
  
  arg1 = (Manager *)jarg1; 
  (arg1)->StopAllSources();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Manager_StopSourceById(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Manager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->StopSourceById(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Manager_StartSourceById(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Manager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->StartSourceById(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Manager_StartAllSinks(void * jarg1) {
  Manager *arg1 = (Manager *) 0 ;
  
  arg1 = (Manager *)jarg1; 
  (arg1)->StartAllSinks();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Manager_StopAllSinks(void * jarg1) {
  Manager *arg1 = (Manager *) 0 ;
  
  arg1 = (Manager *)jarg1; 
  (arg1)->StopAllSinks();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Manager_StartSinkById(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Manager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->StartSinkById(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Manager_StopSinkById(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Manager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->StopSinkById(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Manager_GetAllSinkStatus(void * jarg1) {
  const char * jresult ;
  Manager *arg1 = (Manager *) 0 ;
  std::string result;
  
  arg1 = (Manager *)jarg1; 
  result = (arg1)->GetAllSinkStatus();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Manager_GetSinkStatusById(void * jarg1, int jarg2) {
  const char * jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (Manager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetSinkStatusById(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Manager_GetSinkResult(void * jarg1, int jarg2) {
  const char * jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (Manager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetSinkResult(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Manager_GetAllSinkResults(void * jarg1) {
  const char * jresult ;
  Manager *arg1 = (Manager *) 0 ;
  std::string result;
  
  arg1 = (Manager *)jarg1; 
  result = (arg1)->GetAllSinkResults();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Manager_CreateCameraCalibrationSink(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Manager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->CreateCameraCalibrationSink(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Manager_BindSourceToCalibrationSink(void * jarg1, int jarg2) {
  Manager *arg1 = (Manager *) 0 ;
  int arg2 ;
  
  arg1 = (Manager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->BindSourceToCalibrationSink(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Manager_CameraCalibrationSinkGrabFrame(void * jarg1, int jarg2) {
  Manager *arg1 = (Manager *) 0 ;
  int arg2 ;
  
  arg1 = (Manager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->CameraCalibrationSinkGrabFrame(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Manager_GetCameraCalibrationResults(void * jarg1, int jarg2) {
  void * jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int arg2 ;
  CameraCalibrationResult result;
  
  arg1 = (Manager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetCameraCalibrationResults(arg2);
  jresult = new CameraCalibrationResult(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Manager_GetMemoryUsageBytes(void * jarg1) {
  int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int result;
  
  arg1 = (Manager *)jarg1; 
  result = (int)(arg1)->GetMemoryUsageBytes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Manager_GetCPUUsage(void * jarg1) {
  int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int result;
  
  arg1 = (Manager *)jarg1; 
  result = (int)(arg1)->GetCPUUsage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Manager_GetCpuTemperature(void * jarg1) {
  int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int result;
  
  arg1 = (Manager *)jarg1; 
  result = (int)(arg1)->GetCpuTemperature();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Manager_GetDiskUsage(void * jarg1) {
  int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int result;
  
  arg1 = (Manager *)jarg1; 
  result = (int)(arg1)->GetDiskUsage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Manager_EnableSinkPreview(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Manager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->EnableSinkPreview(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Manager_DisableSinkPreview(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Manager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->DisableSinkPreview(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Manager_GetPreviewImage(void * jarg1, int jarg2) {
  void * jresult ;
  Manager *arg1 = (Manager *) 0 ;
  int arg2 ;
  Image8U result;
  
  arg1 = (Manager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetPreviewImage(arg2);
  jresult = new Image8U(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CameraCalibrationResult_fx_set(void * jarg1, double jarg2) {
  CameraCalibrationResult *arg1 = (CameraCalibrationResult *) 0 ;
  double arg2 ;
  
  arg1 = (CameraCalibrationResult *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fx = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CameraCalibrationResult_fx_get(void * jarg1) {
  double jresult ;
  CameraCalibrationResult *arg1 = (CameraCalibrationResult *) 0 ;
  double result;
  
  arg1 = (CameraCalibrationResult *)jarg1; 
  result = (double) ((arg1)->fx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CameraCalibrationResult_fy_set(void * jarg1, double jarg2) {
  CameraCalibrationResult *arg1 = (CameraCalibrationResult *) 0 ;
  double arg2 ;
  
  arg1 = (CameraCalibrationResult *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->fy = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CameraCalibrationResult_fy_get(void * jarg1) {
  double jresult ;
  CameraCalibrationResult *arg1 = (CameraCalibrationResult *) 0 ;
  double result;
  
  arg1 = (CameraCalibrationResult *)jarg1; 
  result = (double) ((arg1)->fy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CameraCalibrationResult_cx_set(void * jarg1, double jarg2) {
  CameraCalibrationResult *arg1 = (CameraCalibrationResult *) 0 ;
  double arg2 ;
  
  arg1 = (CameraCalibrationResult *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->cx = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CameraCalibrationResult_cx_get(void * jarg1) {
  double jresult ;
  CameraCalibrationResult *arg1 = (CameraCalibrationResult *) 0 ;
  double result;
  
  arg1 = (CameraCalibrationResult *)jarg1; 
  result = (double) ((arg1)->cx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CameraCalibrationResult_cy_set(void * jarg1, double jarg2) {
  CameraCalibrationResult *arg1 = (CameraCalibrationResult *) 0 ;
  double arg2 ;
  
  arg1 = (CameraCalibrationResult *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->cy = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CameraCalibrationResult_cy_get(void * jarg1) {
  double jresult ;
  CameraCalibrationResult *arg1 = (CameraCalibrationResult *) 0 ;
  double result;
  
  arg1 = (CameraCalibrationResult *)jarg1; 
  result = (double) ((arg1)->cy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CameraCalibrationResult_frameSpec_set(void * jarg1, void * jarg2) {
  CameraCalibrationResult *arg1 = (CameraCalibrationResult *) 0 ;
  FrameSpec arg2 ;
  FrameSpec *argp2 ;
  
  arg1 = (CameraCalibrationResult *)jarg1; 
  argp2 = (FrameSpec *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null FrameSpec", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->frameSpec = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CameraCalibrationResult_frameSpec_get(void * jarg1) {
  void * jresult ;
  CameraCalibrationResult *arg1 = (CameraCalibrationResult *) 0 ;
  FrameSpec result;
  
  arg1 = (CameraCalibrationResult *)jarg1; 
  result =  ((arg1)->frameSpec);
  jresult = new FrameSpec(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CameraCalibrationResult__SWIG_0() {
  void * jresult ;
  CameraCalibrationResult *result = 0 ;
  
  result = (CameraCalibrationResult *)new CameraCalibrationResult();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CameraCalibrationResult__SWIG_1(double jarg1, double jarg2, double jarg3, double jarg4, void * jarg5) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  FrameSpec arg5 ;
  FrameSpec *argp5 ;
  CameraCalibrationResult *result = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  argp5 = (FrameSpec *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null FrameSpec", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (CameraCalibrationResult *)new CameraCalibrationResult(arg1,arg2,arg3,arg4,SWIG_STD_MOVE(arg5));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CameraCalibrationResult(void * jarg1) {
  CameraCalibrationResult *arg1 = (CameraCalibrationResult *) 0 ;
  
  arg1 = (CameraCalibrationResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Log(int jarg1, const char * jarg2) {
  void * jresult ;
  LogLevel arg1 ;
  std::string arg2 ;
  Log *result = 0 ;
  
  arg1 = (LogLevel)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (Log *)new Log(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Log_GetLogLevel(void * jarg1) {
  int jresult ;
  Log *arg1 = (Log *) 0 ;
  LogLevel result;
  
  arg1 = (Log *)jarg1; 
  result = (LogLevel)(arg1)->GetLogLevel();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Log_GetMessage(void * jarg1) {
  const char * jresult ;
  Log *arg1 = (Log *) 0 ;
  std::string result;
  
  arg1 = (Log *)jarg1; 
  result = (arg1)->GetMessage();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Log_GetLogLevelString(void * jarg1) {
  const char * jresult ;
  Log *arg1 = (Log *) 0 ;
  std::string result;
  
  arg1 = (Log *)jarg1; 
  result = (arg1)->GetLogLevelString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Log(void * jarg1) {
  Log *arg1 = (Log *) 0 ;
  
  arg1 = (Log *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Logger__SWIG_0() {
  void * jresult ;
  Logger *result = 0 ;
  
  result = (Logger *)new Logger();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Logger__SWIG_1(const char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  Logger *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (Logger *)new Logger(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Logger(void * jarg1) {
  Logger *arg1 = (Logger *) 0 ;
  
  arg1 = (Logger *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Logger_EnterLog__SWIG_0(void * jarg1, const char * jarg2) {
  Logger *arg1 = (Logger *) 0 ;
  std::string arg2 ;
  
  arg1 = (Logger *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->EnterLog(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void SWIGSTDCALL CSharp_Logger_EnterLog__SWIG_1(void * jarg1, int jarg2, const char * jarg3) {
  Logger *arg1 = (Logger *) 0 ;
  LogLevel arg2 ;
  std::string arg3 ;
  
  arg1 = (Logger *)jarg1; 
  arg2 = (LogLevel)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->EnterLog(arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_Logger_EnterLog__SWIG_2(void * jarg1, void * jarg2) {
  Logger *arg1 = (Logger *) 0 ;
  Log *arg2 = (Log *) 0 ;
  
  arg1 = (Logger *)jarg1; 
  arg2 = (Log *)jarg2; 
  (arg1)->EnterLog(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Logger_ClearAllLogs(void * jarg1) {
  Logger *arg1 = (Logger *) 0 ;
  
  arg1 = (Logger *)jarg1; 
  (arg1)->ClearAllLogs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Logger_FlushLogs(void * jarg1) {
  Logger *arg1 = (Logger *) 0 ;
  
  arg1 = (Logger *)jarg1; 
  (arg1)->FlushLogs();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorInt__SWIG_0() {
  void * jresult ;
  std::vector< int > *result = 0 ;
  
  result = (std::vector< int > *)new std::vector< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorInt__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return 0;
  } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_Clear(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_Add(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((int const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorInt_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorInt_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorInt_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorInt__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorInt_getitemcopy(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int)std_vector_Sl_int_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorInt_getitem(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_setitem(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__setitem(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_AddRange(void * jarg1, void * jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  std_vector_Sl_int_Sg__AddRange(arg1,(std::vector< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorInt_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_Insert(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__Insert(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__InsertRange(arg1,arg2,(std::vector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_RemoveAt(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_int_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorInt_Repeat(int jarg1, int jarg2) {
  void * jresult ;
  int *arg1 = 0 ;
  int arg2 ;
  int temp1 ;
  std::vector< int > *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__Repeat((int const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_Reverse__SWIG_0(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  std_vector_Sl_int_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__SetRange(arg1,arg2,(std::vector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorInt_Contains(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Contains(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorInt_IndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__IndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorInt_LastIndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__LastIndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorInt_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorInt(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorString__SWIG_0() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorString__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_Clear(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_Add(void * jarg1, const char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->push_back((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorString_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorString_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorString_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorString__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_VectorString_getitemcopy(void * jarg1, int jarg2) {
  const char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_VectorString_getitem(void * jarg1, int jarg2) {
  const char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_setitem(void * jarg1, int jarg2, const char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorString_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_Insert(void * jarg1, int jarg2, const char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorString_Repeat(const char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorString_Contains(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorString_IndexOf(void * jarg1, const char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorString_LastIndexOf(void * jarg1, const char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorString_Remove(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorString(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorLog__SWIG_0() {
  void * jresult ;
  std::vector< Log > *result = 0 ;
  
  result = (std::vector< Log > *)new std::vector< Log >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorLog__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Log > *arg1 = 0 ;
  std::vector< Log > *result = 0 ;
  
  arg1 = (std::vector< Log > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Log > const & is null", 0);
    return 0;
  } 
  result = (std::vector< Log > *)new std::vector< Log >((std::vector< Log > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_Clear(void * jarg1) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_Add(void * jarg1, void * jarg2) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  Log *arg2 = 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (Log *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Log const & is null", 0);
    return ;
  } 
  (arg1)->push_back((Log const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorLog_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  std::vector< Log >::size_type result;
  
  arg1 = (std::vector< Log > *)jarg1; 
  result = ((std::vector< Log > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorLog_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  bool result;
  
  arg1 = (std::vector< Log > *)jarg1; 
  result = (bool)((std::vector< Log > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorLog_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  std::vector< Log >::size_type result;
  
  arg1 = (std::vector< Log > *)jarg1; 
  result = ((std::vector< Log > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  std::vector< Log >::size_type arg2 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (std::vector< Log >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorLog__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Log > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Log > *)new_std_vector_Sl_Log_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorLog_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  int arg2 ;
  SwigValueWrapper< Log > result;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_Log_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new Log(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorLog_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  int arg2 ;
  std::vector< Log >::value_type *result = 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Log >::value_type *) &std_vector_Sl_Log_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  int arg2 ;
  Log *arg3 = 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Log *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Log const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Log_Sg__setitem(arg1,arg2,(Log const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_AddRange(void * jarg1, void * jarg2) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  std::vector< Log > *arg2 = 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (std::vector< Log > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Log > const & is null", 0);
    return ;
  } 
  std_vector_Sl_Log_Sg__AddRange(arg1,(std::vector< Log > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorLog_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Log > *result = 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Log > *)std_vector_Sl_Log_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  int arg2 ;
  Log *arg3 = 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Log *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Log const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Log_Sg__Insert(arg1,arg2,(Log const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  int arg2 ;
  std::vector< Log > *arg3 = 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Log > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Log > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Log_Sg__InsertRange(arg1,arg2,(std::vector< Log > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Log_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Log_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorLog_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Log *arg1 = 0 ;
  int arg2 ;
  std::vector< Log > *result = 0 ;
  
  arg1 = (Log *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Log const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Log > *)std_vector_Sl_Log_Sg__Repeat((Log const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_Reverse__SWIG_0(void * jarg1) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  std_vector_Sl_Log_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Log_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  int arg2 ;
  std::vector< Log > *arg3 = 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Log > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Log > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Log_Sg__SetRange(arg1,arg2,(std::vector< Log > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorLog(void * jarg1) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorCameraHardwareInfo__SWIG_0() {
  void * jresult ;
  std::vector< CameraHardwareInfo > *result = 0 ;
  
  result = (std::vector< CameraHardwareInfo > *)new std::vector< CameraHardwareInfo >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorCameraHardwareInfo__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< CameraHardwareInfo > *arg1 = 0 ;
  std::vector< CameraHardwareInfo > *result = 0 ;
  
  arg1 = (std::vector< CameraHardwareInfo > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CameraHardwareInfo > const & is null", 0);
    return 0;
  } 
  result = (std::vector< CameraHardwareInfo > *)new std::vector< CameraHardwareInfo >((std::vector< CameraHardwareInfo > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraHardwareInfo_Clear(void * jarg1) {
  std::vector< CameraHardwareInfo > *arg1 = (std::vector< CameraHardwareInfo > *) 0 ;
  
  arg1 = (std::vector< CameraHardwareInfo > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraHardwareInfo_Add(void * jarg1, void * jarg2) {
  std::vector< CameraHardwareInfo > *arg1 = (std::vector< CameraHardwareInfo > *) 0 ;
  CameraHardwareInfo *arg2 = 0 ;
  
  arg1 = (std::vector< CameraHardwareInfo > *)jarg1; 
  arg2 = (CameraHardwareInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CameraHardwareInfo const & is null", 0);
    return ;
  } 
  (arg1)->push_back((CameraHardwareInfo const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorCameraHardwareInfo_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< CameraHardwareInfo > *arg1 = (std::vector< CameraHardwareInfo > *) 0 ;
  std::vector< CameraHardwareInfo >::size_type result;
  
  arg1 = (std::vector< CameraHardwareInfo > *)jarg1; 
  result = ((std::vector< CameraHardwareInfo > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorCameraHardwareInfo_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< CameraHardwareInfo > *arg1 = (std::vector< CameraHardwareInfo > *) 0 ;
  bool result;
  
  arg1 = (std::vector< CameraHardwareInfo > *)jarg1; 
  result = (bool)((std::vector< CameraHardwareInfo > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorCameraHardwareInfo_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< CameraHardwareInfo > *arg1 = (std::vector< CameraHardwareInfo > *) 0 ;
  std::vector< CameraHardwareInfo >::size_type result;
  
  arg1 = (std::vector< CameraHardwareInfo > *)jarg1; 
  result = ((std::vector< CameraHardwareInfo > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraHardwareInfo_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< CameraHardwareInfo > *arg1 = (std::vector< CameraHardwareInfo > *) 0 ;
  std::vector< CameraHardwareInfo >::size_type arg2 ;
  
  arg1 = (std::vector< CameraHardwareInfo > *)jarg1; 
  arg2 = (std::vector< CameraHardwareInfo >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorCameraHardwareInfo__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< CameraHardwareInfo > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< CameraHardwareInfo > *)new_std_vector_Sl_CameraHardwareInfo_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorCameraHardwareInfo_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< CameraHardwareInfo > *arg1 = (std::vector< CameraHardwareInfo > *) 0 ;
  int arg2 ;
  CameraHardwareInfo result;
  
  arg1 = (std::vector< CameraHardwareInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_CameraHardwareInfo_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new CameraHardwareInfo(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorCameraHardwareInfo_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< CameraHardwareInfo > *arg1 = (std::vector< CameraHardwareInfo > *) 0 ;
  int arg2 ;
  std::vector< CameraHardwareInfo >::value_type *result = 0 ;
  
  arg1 = (std::vector< CameraHardwareInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< CameraHardwareInfo >::value_type *) &std_vector_Sl_CameraHardwareInfo_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraHardwareInfo_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CameraHardwareInfo > *arg1 = (std::vector< CameraHardwareInfo > *) 0 ;
  int arg2 ;
  CameraHardwareInfo *arg3 = 0 ;
  
  arg1 = (std::vector< CameraHardwareInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (CameraHardwareInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CameraHardwareInfo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_CameraHardwareInfo_Sg__setitem(arg1,arg2,(CameraHardwareInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraHardwareInfo_AddRange(void * jarg1, void * jarg2) {
  std::vector< CameraHardwareInfo > *arg1 = (std::vector< CameraHardwareInfo > *) 0 ;
  std::vector< CameraHardwareInfo > *arg2 = 0 ;
  
  arg1 = (std::vector< CameraHardwareInfo > *)jarg1; 
  arg2 = (std::vector< CameraHardwareInfo > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CameraHardwareInfo > const & is null", 0);
    return ;
  } 
  std_vector_Sl_CameraHardwareInfo_Sg__AddRange(arg1,(std::vector< CameraHardwareInfo > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorCameraHardwareInfo_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< CameraHardwareInfo > *arg1 = (std::vector< CameraHardwareInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< CameraHardwareInfo > *result = 0 ;
  
  arg1 = (std::vector< CameraHardwareInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< CameraHardwareInfo > *)std_vector_Sl_CameraHardwareInfo_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraHardwareInfo_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CameraHardwareInfo > *arg1 = (std::vector< CameraHardwareInfo > *) 0 ;
  int arg2 ;
  CameraHardwareInfo *arg3 = 0 ;
  
  arg1 = (std::vector< CameraHardwareInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (CameraHardwareInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CameraHardwareInfo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_CameraHardwareInfo_Sg__Insert(arg1,arg2,(CameraHardwareInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraHardwareInfo_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CameraHardwareInfo > *arg1 = (std::vector< CameraHardwareInfo > *) 0 ;
  int arg2 ;
  std::vector< CameraHardwareInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< CameraHardwareInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< CameraHardwareInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CameraHardwareInfo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_CameraHardwareInfo_Sg__InsertRange(arg1,arg2,(std::vector< CameraHardwareInfo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraHardwareInfo_RemoveAt(void * jarg1, int jarg2) {
  std::vector< CameraHardwareInfo > *arg1 = (std::vector< CameraHardwareInfo > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< CameraHardwareInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_CameraHardwareInfo_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraHardwareInfo_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< CameraHardwareInfo > *arg1 = (std::vector< CameraHardwareInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< CameraHardwareInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_CameraHardwareInfo_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorCameraHardwareInfo_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  CameraHardwareInfo *arg1 = 0 ;
  int arg2 ;
  std::vector< CameraHardwareInfo > *result = 0 ;
  
  arg1 = (CameraHardwareInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CameraHardwareInfo const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< CameraHardwareInfo > *)std_vector_Sl_CameraHardwareInfo_Sg__Repeat((CameraHardwareInfo const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraHardwareInfo_Reverse__SWIG_0(void * jarg1) {
  std::vector< CameraHardwareInfo > *arg1 = (std::vector< CameraHardwareInfo > *) 0 ;
  
  arg1 = (std::vector< CameraHardwareInfo > *)jarg1; 
  std_vector_Sl_CameraHardwareInfo_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraHardwareInfo_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< CameraHardwareInfo > *arg1 = (std::vector< CameraHardwareInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< CameraHardwareInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_CameraHardwareInfo_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraHardwareInfo_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CameraHardwareInfo > *arg1 = (std::vector< CameraHardwareInfo > *) 0 ;
  int arg2 ;
  std::vector< CameraHardwareInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< CameraHardwareInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< CameraHardwareInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CameraHardwareInfo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_CameraHardwareInfo_Sg__SetRange(arg1,arg2,(std::vector< CameraHardwareInfo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorCameraHardwareInfo(void * jarg1) {
  std::vector< CameraHardwareInfo > *arg1 = (std::vector< CameraHardwareInfo > *) 0 ;
  
  arg1 = (std::vector< CameraHardwareInfo > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorFrame__SWIG_0() {
  void * jresult ;
  std::vector< Frame > *result = 0 ;
  
  result = (std::vector< Frame > *)new std::vector< Frame >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorFrame__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Frame > *arg1 = 0 ;
  std::vector< Frame > *result = 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Frame > const & is null", 0);
    return 0;
  } 
  result = (std::vector< Frame > *)new std::vector< Frame >((std::vector< Frame > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_Clear(void * jarg1) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_Add(void * jarg1, void * jarg2) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  Frame *arg2 = 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (Frame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Frame const & is null", 0);
    return ;
  } 
  (arg1)->push_back((Frame const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorFrame_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  std::vector< Frame >::size_type result;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  result = ((std::vector< Frame > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorFrame_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  bool result;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  result = (bool)((std::vector< Frame > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorFrame_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  std::vector< Frame >::size_type result;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  result = ((std::vector< Frame > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  std::vector< Frame >::size_type arg2 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (std::vector< Frame >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorFrame__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Frame > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Frame > *)new_std_vector_Sl_Frame_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorFrame_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  int arg2 ;
  Frame result;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_Frame_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new Frame(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorFrame_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  int arg2 ;
  std::vector< Frame >::value_type *result = 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Frame >::value_type *) &std_vector_Sl_Frame_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  int arg2 ;
  Frame *arg3 = 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Frame *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Frame const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Frame_Sg__setitem(arg1,arg2,(Frame const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_AddRange(void * jarg1, void * jarg2) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  std::vector< Frame > *arg2 = 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (std::vector< Frame > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Frame > const & is null", 0);
    return ;
  } 
  std_vector_Sl_Frame_Sg__AddRange(arg1,(std::vector< Frame > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorFrame_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Frame > *result = 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Frame > *)std_vector_Sl_Frame_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  int arg2 ;
  Frame *arg3 = 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Frame *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Frame const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Frame_Sg__Insert(arg1,arg2,(Frame const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  int arg2 ;
  std::vector< Frame > *arg3 = 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Frame > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Frame > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Frame_Sg__InsertRange(arg1,arg2,(std::vector< Frame > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Frame_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Frame_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorFrame_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Frame *arg1 = 0 ;
  int arg2 ;
  std::vector< Frame > *result = 0 ;
  
  arg1 = (Frame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Frame const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Frame > *)std_vector_Sl_Frame_Sg__Repeat((Frame const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_Reverse__SWIG_0(void * jarg1) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  std_vector_Sl_Frame_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Frame_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  int arg2 ;
  std::vector< Frame > *arg3 = 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Frame > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Frame > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Frame_Sg__SetRange(arg1,arg2,(std::vector< Frame > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorFrame(void * jarg1) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorFrameSpec__SWIG_0() {
  void * jresult ;
  std::vector< FrameSpec > *result = 0 ;
  
  result = (std::vector< FrameSpec > *)new std::vector< FrameSpec >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorFrameSpec__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< FrameSpec > *arg1 = 0 ;
  std::vector< FrameSpec > *result = 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< FrameSpec > const & is null", 0);
    return 0;
  } 
  result = (std::vector< FrameSpec > *)new std::vector< FrameSpec >((std::vector< FrameSpec > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_Clear(void * jarg1) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_Add(void * jarg1, void * jarg2) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  FrameSpec *arg2 = 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (FrameSpec *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FrameSpec const & is null", 0);
    return ;
  } 
  (arg1)->push_back((FrameSpec const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorFrameSpec_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  std::vector< FrameSpec >::size_type result;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  result = ((std::vector< FrameSpec > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorFrameSpec_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  bool result;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  result = (bool)((std::vector< FrameSpec > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorFrameSpec_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  std::vector< FrameSpec >::size_type result;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  result = ((std::vector< FrameSpec > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  std::vector< FrameSpec >::size_type arg2 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (std::vector< FrameSpec >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorFrameSpec__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< FrameSpec > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< FrameSpec > *)new_std_vector_Sl_FrameSpec_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorFrameSpec_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  int arg2 ;
  FrameSpec result;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_FrameSpec_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new FrameSpec(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorFrameSpec_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  int arg2 ;
  std::vector< FrameSpec >::value_type *result = 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< FrameSpec >::value_type *) &std_vector_Sl_FrameSpec_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  int arg2 ;
  FrameSpec *arg3 = 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (FrameSpec *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FrameSpec const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_FrameSpec_Sg__setitem(arg1,arg2,(FrameSpec const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_AddRange(void * jarg1, void * jarg2) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  std::vector< FrameSpec > *arg2 = 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (std::vector< FrameSpec > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< FrameSpec > const & is null", 0);
    return ;
  } 
  std_vector_Sl_FrameSpec_Sg__AddRange(arg1,(std::vector< FrameSpec > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorFrameSpec_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< FrameSpec > *result = 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< FrameSpec > *)std_vector_Sl_FrameSpec_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  int arg2 ;
  FrameSpec *arg3 = 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (FrameSpec *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FrameSpec const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_FrameSpec_Sg__Insert(arg1,arg2,(FrameSpec const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  int arg2 ;
  std::vector< FrameSpec > *arg3 = 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< FrameSpec > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< FrameSpec > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_FrameSpec_Sg__InsertRange(arg1,arg2,(std::vector< FrameSpec > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_RemoveAt(void * jarg1, int jarg2) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_FrameSpec_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_FrameSpec_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorFrameSpec_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  FrameSpec *arg1 = 0 ;
  int arg2 ;
  std::vector< FrameSpec > *result = 0 ;
  
  arg1 = (FrameSpec *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FrameSpec const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< FrameSpec > *)std_vector_Sl_FrameSpec_Sg__Repeat((FrameSpec const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_Reverse__SWIG_0(void * jarg1) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  std_vector_Sl_FrameSpec_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_FrameSpec_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  int arg2 ;
  std::vector< FrameSpec > *arg3 = 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< FrameSpec > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< FrameSpec > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_FrameSpec_Sg__SetRange(arg1,arg2,(std::vector< FrameSpec > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorFrameSpec(void * jarg1) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UniquePtrLog() {
  void * jresult ;
  std::unique_ptr< Log > *result = 0 ;
  
  result = (std::unique_ptr< Log > *)new std::unique_ptr< Log >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UniquePtrLog(void * jarg1) {
  std::unique_ptr< Log > *arg1 = (std::unique_ptr< Log > *) 0 ;
  
  arg1 = (std::unique_ptr< Log > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UniquePtrFrame() {
  void * jresult ;
  std::unique_ptr< Frame > *result = 0 ;
  
  result = (std::unique_ptr< Frame > *)new std::unique_ptr< Frame >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UniquePtrFrame(void * jarg1) {
  std::unique_ptr< Frame > *arg1 = (std::unique_ptr< Frame > *) 0 ;
  
  arg1 = (std::unique_ptr< Frame > *)jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

