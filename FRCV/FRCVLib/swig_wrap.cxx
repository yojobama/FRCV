/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040301
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_FRCVCore(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_FRCVCore(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_FRCVCore(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "Logger.h"
#include "IFrameSource.h"
#include "ImageFileFrameSource.h"
#include "VideoFileFrameSource.h"
#include "CameraFrameSource.h"
#include "FramePool.h"
#include "Frame.h"
#include "FrameSpec.h"
#include "ApriltagDetection.h"
#include "ApriltagSink.h"
#include "ISink.h"
#include "IObjectDetectionSink.h"
#include "RknnSink.h"
#include "TRTSink.h"
#include "PreProcessor.h"
#include "SingleSourcePipeline.h"
#include "IPipeline.h"
#include "SterioPipeline.h"


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< Logger > *new_std_vector_Sl_Logger_Sg___SWIG_2(int capacity){
        std::vector< Logger >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Logger >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Logger std_vector_Sl_Logger_Sg__getitemcopy(std::vector< Logger > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< Logger >::value_type const &std_vector_Sl_Logger_Sg__getitem(std::vector< Logger > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Logger_Sg__setitem(std::vector< Logger > *self,int index,Logger const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Logger_Sg__AddRange(std::vector< Logger > *self,std::vector< Logger > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Logger > *std_vector_Sl_Logger_Sg__GetRange(std::vector< Logger > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Logger >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Logger_Sg__Insert(std::vector< Logger > *self,int index,Logger const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Logger_Sg__InsertRange(std::vector< Logger > *self,int index,std::vector< Logger > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Logger_Sg__RemoveAt(std::vector< Logger > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Logger_Sg__RemoveRange(std::vector< Logger > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Logger > *std_vector_Sl_Logger_Sg__Repeat(Logger const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Logger >(count, value);
      }
SWIGINTERN void std_vector_Sl_Logger_Sg__Reverse__SWIG_0(std::vector< Logger > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Logger_Sg__Reverse__SWIG_1(std::vector< Logger > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Logger_Sg__SetRange(std::vector< Logger > *self,int index,std::vector< Logger > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< Log > *new_std_vector_Sl_Log_Sg___SWIG_2(int capacity){
        std::vector< Log >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Log >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Log std_vector_Sl_Log_Sg__getitemcopy(std::vector< Log > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< Log >::value_type const &std_vector_Sl_Log_Sg__getitem(std::vector< Log > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Log_Sg__setitem(std::vector< Log > *self,int index,Log const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Log_Sg__AddRange(std::vector< Log > *self,std::vector< Log > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Log > *std_vector_Sl_Log_Sg__GetRange(std::vector< Log > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Log >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Log_Sg__Insert(std::vector< Log > *self,int index,Log const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Log_Sg__InsertRange(std::vector< Log > *self,int index,std::vector< Log > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Log_Sg__RemoveAt(std::vector< Log > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Log_Sg__RemoveRange(std::vector< Log > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Log > *std_vector_Sl_Log_Sg__Repeat(Log const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Log >(count, value);
      }
SWIGINTERN void std_vector_Sl_Log_Sg__Reverse__SWIG_0(std::vector< Log > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Log_Sg__Reverse__SWIG_1(std::vector< Log > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Log_Sg__SetRange(std::vector< Log > *self,int index,std::vector< Log > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< IFrameSource > *new_std_vector_Sl_IFrameSource_Sg___SWIG_2(int capacity){
        std::vector< IFrameSource >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< IFrameSource >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN IFrameSource std_vector_Sl_IFrameSource_Sg__getitemcopy(std::vector< IFrameSource > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< IFrameSource >::value_type const &std_vector_Sl_IFrameSource_Sg__getitem(std::vector< IFrameSource > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_IFrameSource_Sg__setitem(std::vector< IFrameSource > *self,int index,IFrameSource const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_IFrameSource_Sg__AddRange(std::vector< IFrameSource > *self,std::vector< IFrameSource > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< IFrameSource > *std_vector_Sl_IFrameSource_Sg__GetRange(std::vector< IFrameSource > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< IFrameSource >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_IFrameSource_Sg__Insert(std::vector< IFrameSource > *self,int index,IFrameSource const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_IFrameSource_Sg__InsertRange(std::vector< IFrameSource > *self,int index,std::vector< IFrameSource > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_IFrameSource_Sg__RemoveAt(std::vector< IFrameSource > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_IFrameSource_Sg__RemoveRange(std::vector< IFrameSource > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< IFrameSource > *std_vector_Sl_IFrameSource_Sg__Repeat(IFrameSource const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< IFrameSource >(count, value);
      }
SWIGINTERN void std_vector_Sl_IFrameSource_Sg__Reverse__SWIG_0(std::vector< IFrameSource > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_IFrameSource_Sg__Reverse__SWIG_1(std::vector< IFrameSource > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_IFrameSource_Sg__SetRange(std::vector< IFrameSource > *self,int index,std::vector< IFrameSource > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< ImageFileFrameSource > *new_std_vector_Sl_ImageFileFrameSource_Sg___SWIG_2(int capacity){
        std::vector< ImageFileFrameSource >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< ImageFileFrameSource >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN ImageFileFrameSource std_vector_Sl_ImageFileFrameSource_Sg__getitemcopy(std::vector< ImageFileFrameSource > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< ImageFileFrameSource >::value_type const &std_vector_Sl_ImageFileFrameSource_Sg__getitem(std::vector< ImageFileFrameSource > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ImageFileFrameSource_Sg__setitem(std::vector< ImageFileFrameSource > *self,int index,ImageFileFrameSource const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ImageFileFrameSource_Sg__AddRange(std::vector< ImageFileFrameSource > *self,std::vector< ImageFileFrameSource > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< ImageFileFrameSource > *std_vector_Sl_ImageFileFrameSource_Sg__GetRange(std::vector< ImageFileFrameSource > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< ImageFileFrameSource >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ImageFileFrameSource_Sg__Insert(std::vector< ImageFileFrameSource > *self,int index,ImageFileFrameSource const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ImageFileFrameSource_Sg__InsertRange(std::vector< ImageFileFrameSource > *self,int index,std::vector< ImageFileFrameSource > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ImageFileFrameSource_Sg__RemoveAt(std::vector< ImageFileFrameSource > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ImageFileFrameSource_Sg__RemoveRange(std::vector< ImageFileFrameSource > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< ImageFileFrameSource > *std_vector_Sl_ImageFileFrameSource_Sg__Repeat(ImageFileFrameSource const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< ImageFileFrameSource >(count, value);
      }
SWIGINTERN void std_vector_Sl_ImageFileFrameSource_Sg__Reverse__SWIG_0(std::vector< ImageFileFrameSource > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_ImageFileFrameSource_Sg__Reverse__SWIG_1(std::vector< ImageFileFrameSource > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ImageFileFrameSource_Sg__SetRange(std::vector< ImageFileFrameSource > *self,int index,std::vector< ImageFileFrameSource > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< VideoFileFrameSource > *new_std_vector_Sl_VideoFileFrameSource_Sg___SWIG_2(int capacity){
        std::vector< VideoFileFrameSource >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< VideoFileFrameSource >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN VideoFileFrameSource std_vector_Sl_VideoFileFrameSource_Sg__getitemcopy(std::vector< VideoFileFrameSource > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< VideoFileFrameSource >::value_type const &std_vector_Sl_VideoFileFrameSource_Sg__getitem(std::vector< VideoFileFrameSource > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_VideoFileFrameSource_Sg__setitem(std::vector< VideoFileFrameSource > *self,int index,VideoFileFrameSource const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_VideoFileFrameSource_Sg__AddRange(std::vector< VideoFileFrameSource > *self,std::vector< VideoFileFrameSource > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< VideoFileFrameSource > *std_vector_Sl_VideoFileFrameSource_Sg__GetRange(std::vector< VideoFileFrameSource > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< VideoFileFrameSource >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_VideoFileFrameSource_Sg__Insert(std::vector< VideoFileFrameSource > *self,int index,VideoFileFrameSource const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_VideoFileFrameSource_Sg__InsertRange(std::vector< VideoFileFrameSource > *self,int index,std::vector< VideoFileFrameSource > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_VideoFileFrameSource_Sg__RemoveAt(std::vector< VideoFileFrameSource > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_VideoFileFrameSource_Sg__RemoveRange(std::vector< VideoFileFrameSource > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< VideoFileFrameSource > *std_vector_Sl_VideoFileFrameSource_Sg__Repeat(VideoFileFrameSource const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< VideoFileFrameSource >(count, value);
      }
SWIGINTERN void std_vector_Sl_VideoFileFrameSource_Sg__Reverse__SWIG_0(std::vector< VideoFileFrameSource > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_VideoFileFrameSource_Sg__Reverse__SWIG_1(std::vector< VideoFileFrameSource > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_VideoFileFrameSource_Sg__SetRange(std::vector< VideoFileFrameSource > *self,int index,std::vector< VideoFileFrameSource > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< CameraFrameSource > *new_std_vector_Sl_CameraFrameSource_Sg___SWIG_2(int capacity){
        std::vector< CameraFrameSource >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< CameraFrameSource >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN CameraFrameSource std_vector_Sl_CameraFrameSource_Sg__getitemcopy(std::vector< CameraFrameSource > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< CameraFrameSource >::value_type const &std_vector_Sl_CameraFrameSource_Sg__getitem(std::vector< CameraFrameSource > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CameraFrameSource_Sg__setitem(std::vector< CameraFrameSource > *self,int index,CameraFrameSource const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CameraFrameSource_Sg__AddRange(std::vector< CameraFrameSource > *self,std::vector< CameraFrameSource > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< CameraFrameSource > *std_vector_Sl_CameraFrameSource_Sg__GetRange(std::vector< CameraFrameSource > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< CameraFrameSource >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_CameraFrameSource_Sg__Insert(std::vector< CameraFrameSource > *self,int index,CameraFrameSource const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CameraFrameSource_Sg__InsertRange(std::vector< CameraFrameSource > *self,int index,std::vector< CameraFrameSource > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CameraFrameSource_Sg__RemoveAt(std::vector< CameraFrameSource > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_CameraFrameSource_Sg__RemoveRange(std::vector< CameraFrameSource > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< CameraFrameSource > *std_vector_Sl_CameraFrameSource_Sg__Repeat(CameraFrameSource const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< CameraFrameSource >(count, value);
      }
SWIGINTERN void std_vector_Sl_CameraFrameSource_Sg__Reverse__SWIG_0(std::vector< CameraFrameSource > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_CameraFrameSource_Sg__Reverse__SWIG_1(std::vector< CameraFrameSource > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_CameraFrameSource_Sg__SetRange(std::vector< CameraFrameSource > *self,int index,std::vector< CameraFrameSource > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< FramePool > *new_std_vector_Sl_FramePool_Sg___SWIG_2(int capacity){
        std::vector< FramePool >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< FramePool >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN FramePool std_vector_Sl_FramePool_Sg__getitemcopy(std::vector< FramePool > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< FramePool >::value_type const &std_vector_Sl_FramePool_Sg__getitem(std::vector< FramePool > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_FramePool_Sg__setitem(std::vector< FramePool > *self,int index,FramePool const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_FramePool_Sg__AddRange(std::vector< FramePool > *self,std::vector< FramePool > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< FramePool > *std_vector_Sl_FramePool_Sg__GetRange(std::vector< FramePool > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< FramePool >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_FramePool_Sg__Insert(std::vector< FramePool > *self,int index,FramePool const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_FramePool_Sg__InsertRange(std::vector< FramePool > *self,int index,std::vector< FramePool > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_FramePool_Sg__RemoveAt(std::vector< FramePool > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_FramePool_Sg__RemoveRange(std::vector< FramePool > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< FramePool > *std_vector_Sl_FramePool_Sg__Repeat(FramePool const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< FramePool >(count, value);
      }
SWIGINTERN void std_vector_Sl_FramePool_Sg__Reverse__SWIG_0(std::vector< FramePool > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_FramePool_Sg__Reverse__SWIG_1(std::vector< FramePool > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_FramePool_Sg__SetRange(std::vector< FramePool > *self,int index,std::vector< FramePool > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< Frame > *new_std_vector_Sl_Frame_Sg___SWIG_2(int capacity){
        std::vector< Frame >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Frame >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Frame std_vector_Sl_Frame_Sg__getitemcopy(std::vector< Frame > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< Frame >::value_type const &std_vector_Sl_Frame_Sg__getitem(std::vector< Frame > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Frame_Sg__setitem(std::vector< Frame > *self,int index,Frame const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Frame_Sg__AddRange(std::vector< Frame > *self,std::vector< Frame > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Frame > *std_vector_Sl_Frame_Sg__GetRange(std::vector< Frame > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Frame >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Frame_Sg__Insert(std::vector< Frame > *self,int index,Frame const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Frame_Sg__InsertRange(std::vector< Frame > *self,int index,std::vector< Frame > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Frame_Sg__RemoveAt(std::vector< Frame > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Frame_Sg__RemoveRange(std::vector< Frame > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Frame > *std_vector_Sl_Frame_Sg__Repeat(Frame const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Frame >(count, value);
      }
SWIGINTERN void std_vector_Sl_Frame_Sg__Reverse__SWIG_0(std::vector< Frame > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Frame_Sg__Reverse__SWIG_1(std::vector< Frame > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Frame_Sg__SetRange(std::vector< Frame > *self,int index,std::vector< Frame > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< FrameSpec > *new_std_vector_Sl_FrameSpec_Sg___SWIG_2(int capacity){
        std::vector< FrameSpec >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< FrameSpec >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN FrameSpec std_vector_Sl_FrameSpec_Sg__getitemcopy(std::vector< FrameSpec > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< FrameSpec >::value_type const &std_vector_Sl_FrameSpec_Sg__getitem(std::vector< FrameSpec > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_FrameSpec_Sg__setitem(std::vector< FrameSpec > *self,int index,FrameSpec const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_FrameSpec_Sg__AddRange(std::vector< FrameSpec > *self,std::vector< FrameSpec > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< FrameSpec > *std_vector_Sl_FrameSpec_Sg__GetRange(std::vector< FrameSpec > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< FrameSpec >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_FrameSpec_Sg__Insert(std::vector< FrameSpec > *self,int index,FrameSpec const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_FrameSpec_Sg__InsertRange(std::vector< FrameSpec > *self,int index,std::vector< FrameSpec > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_FrameSpec_Sg__RemoveAt(std::vector< FrameSpec > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_FrameSpec_Sg__RemoveRange(std::vector< FrameSpec > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< FrameSpec > *std_vector_Sl_FrameSpec_Sg__Repeat(FrameSpec const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< FrameSpec >(count, value);
      }
SWIGINTERN void std_vector_Sl_FrameSpec_Sg__Reverse__SWIG_0(std::vector< FrameSpec > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_FrameSpec_Sg__Reverse__SWIG_1(std::vector< FrameSpec > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_FrameSpec_Sg__SetRange(std::vector< FrameSpec > *self,int index,std::vector< FrameSpec > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< ApriltagDetection > *new_std_vector_Sl_ApriltagDetection_Sg___SWIG_2(int capacity){
        std::vector< ApriltagDetection >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< ApriltagDetection >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN ApriltagDetection std_vector_Sl_ApriltagDetection_Sg__getitemcopy(std::vector< ApriltagDetection > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< ApriltagDetection >::value_type const &std_vector_Sl_ApriltagDetection_Sg__getitem(std::vector< ApriltagDetection > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ApriltagDetection_Sg__setitem(std::vector< ApriltagDetection > *self,int index,ApriltagDetection const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ApriltagDetection_Sg__AddRange(std::vector< ApriltagDetection > *self,std::vector< ApriltagDetection > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< ApriltagDetection > *std_vector_Sl_ApriltagDetection_Sg__GetRange(std::vector< ApriltagDetection > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< ApriltagDetection >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ApriltagDetection_Sg__Insert(std::vector< ApriltagDetection > *self,int index,ApriltagDetection const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ApriltagDetection_Sg__InsertRange(std::vector< ApriltagDetection > *self,int index,std::vector< ApriltagDetection > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ApriltagDetection_Sg__RemoveAt(std::vector< ApriltagDetection > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ApriltagDetection_Sg__RemoveRange(std::vector< ApriltagDetection > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< ApriltagDetection > *std_vector_Sl_ApriltagDetection_Sg__Repeat(ApriltagDetection const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< ApriltagDetection >(count, value);
      }
SWIGINTERN void std_vector_Sl_ApriltagDetection_Sg__Reverse__SWIG_0(std::vector< ApriltagDetection > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_ApriltagDetection_Sg__Reverse__SWIG_1(std::vector< ApriltagDetection > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ApriltagDetection_Sg__SetRange(std::vector< ApriltagDetection > *self,int index,std::vector< ApriltagDetection > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< ApriltagSink > *new_std_vector_Sl_ApriltagSink_Sg___SWIG_2(int capacity){
        std::vector< ApriltagSink >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< ApriltagSink >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN ApriltagSink std_vector_Sl_ApriltagSink_Sg__getitemcopy(std::vector< ApriltagSink > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< ApriltagSink >::value_type const &std_vector_Sl_ApriltagSink_Sg__getitem(std::vector< ApriltagSink > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ApriltagSink_Sg__setitem(std::vector< ApriltagSink > *self,int index,ApriltagSink const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ApriltagSink_Sg__AddRange(std::vector< ApriltagSink > *self,std::vector< ApriltagSink > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< ApriltagSink > *std_vector_Sl_ApriltagSink_Sg__GetRange(std::vector< ApriltagSink > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< ApriltagSink >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ApriltagSink_Sg__Insert(std::vector< ApriltagSink > *self,int index,ApriltagSink const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ApriltagSink_Sg__InsertRange(std::vector< ApriltagSink > *self,int index,std::vector< ApriltagSink > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ApriltagSink_Sg__RemoveAt(std::vector< ApriltagSink > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ApriltagSink_Sg__RemoveRange(std::vector< ApriltagSink > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< ApriltagSink > *std_vector_Sl_ApriltagSink_Sg__Repeat(ApriltagSink const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< ApriltagSink >(count, value);
      }
SWIGINTERN void std_vector_Sl_ApriltagSink_Sg__Reverse__SWIG_0(std::vector< ApriltagSink > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_ApriltagSink_Sg__Reverse__SWIG_1(std::vector< ApriltagSink > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ApriltagSink_Sg__SetRange(std::vector< ApriltagSink > *self,int index,std::vector< ApriltagSink > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< ISink > *new_std_vector_Sl_ISink_Sg___SWIG_2(int capacity){
        std::vector< ISink >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< ISink >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN ISink std_vector_Sl_ISink_Sg__getitemcopy(std::vector< ISink > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< ISink >::value_type const &std_vector_Sl_ISink_Sg__getitem(std::vector< ISink > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ISink_Sg__setitem(std::vector< ISink > *self,int index,ISink const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ISink_Sg__AddRange(std::vector< ISink > *self,std::vector< ISink > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< ISink > *std_vector_Sl_ISink_Sg__GetRange(std::vector< ISink > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< ISink >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ISink_Sg__Insert(std::vector< ISink > *self,int index,ISink const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ISink_Sg__InsertRange(std::vector< ISink > *self,int index,std::vector< ISink > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ISink_Sg__RemoveAt(std::vector< ISink > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ISink_Sg__RemoveRange(std::vector< ISink > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< ISink > *std_vector_Sl_ISink_Sg__Repeat(ISink const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< ISink >(count, value);
      }
SWIGINTERN void std_vector_Sl_ISink_Sg__Reverse__SWIG_0(std::vector< ISink > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_ISink_Sg__Reverse__SWIG_1(std::vector< ISink > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ISink_Sg__SetRange(std::vector< ISink > *self,int index,std::vector< ISink > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< IObjectDetectionSink > *new_std_vector_Sl_IObjectDetectionSink_Sg___SWIG_2(int capacity){
        std::vector< IObjectDetectionSink >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< IObjectDetectionSink >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN IObjectDetectionSink std_vector_Sl_IObjectDetectionSink_Sg__getitemcopy(std::vector< IObjectDetectionSink > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< IObjectDetectionSink >::value_type const &std_vector_Sl_IObjectDetectionSink_Sg__getitem(std::vector< IObjectDetectionSink > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_IObjectDetectionSink_Sg__setitem(std::vector< IObjectDetectionSink > *self,int index,IObjectDetectionSink const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_IObjectDetectionSink_Sg__AddRange(std::vector< IObjectDetectionSink > *self,std::vector< IObjectDetectionSink > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< IObjectDetectionSink > *std_vector_Sl_IObjectDetectionSink_Sg__GetRange(std::vector< IObjectDetectionSink > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< IObjectDetectionSink >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_IObjectDetectionSink_Sg__Insert(std::vector< IObjectDetectionSink > *self,int index,IObjectDetectionSink const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_IObjectDetectionSink_Sg__InsertRange(std::vector< IObjectDetectionSink > *self,int index,std::vector< IObjectDetectionSink > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_IObjectDetectionSink_Sg__RemoveAt(std::vector< IObjectDetectionSink > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_IObjectDetectionSink_Sg__RemoveRange(std::vector< IObjectDetectionSink > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< IObjectDetectionSink > *std_vector_Sl_IObjectDetectionSink_Sg__Repeat(IObjectDetectionSink const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< IObjectDetectionSink >(count, value);
      }
SWIGINTERN void std_vector_Sl_IObjectDetectionSink_Sg__Reverse__SWIG_0(std::vector< IObjectDetectionSink > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_IObjectDetectionSink_Sg__Reverse__SWIG_1(std::vector< IObjectDetectionSink > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_IObjectDetectionSink_Sg__SetRange(std::vector< IObjectDetectionSink > *self,int index,std::vector< IObjectDetectionSink > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< RknnSink > *new_std_vector_Sl_RknnSink_Sg___SWIG_2(int capacity){
        std::vector< RknnSink >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< RknnSink >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN RknnSink std_vector_Sl_RknnSink_Sg__getitemcopy(std::vector< RknnSink > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< RknnSink >::value_type const &std_vector_Sl_RknnSink_Sg__getitem(std::vector< RknnSink > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_RknnSink_Sg__setitem(std::vector< RknnSink > *self,int index,RknnSink const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_RknnSink_Sg__AddRange(std::vector< RknnSink > *self,std::vector< RknnSink > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< RknnSink > *std_vector_Sl_RknnSink_Sg__GetRange(std::vector< RknnSink > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< RknnSink >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_RknnSink_Sg__Insert(std::vector< RknnSink > *self,int index,RknnSink const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_RknnSink_Sg__InsertRange(std::vector< RknnSink > *self,int index,std::vector< RknnSink > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_RknnSink_Sg__RemoveAt(std::vector< RknnSink > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_RknnSink_Sg__RemoveRange(std::vector< RknnSink > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< RknnSink > *std_vector_Sl_RknnSink_Sg__Repeat(RknnSink const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< RknnSink >(count, value);
      }
SWIGINTERN void std_vector_Sl_RknnSink_Sg__Reverse__SWIG_0(std::vector< RknnSink > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_RknnSink_Sg__Reverse__SWIG_1(std::vector< RknnSink > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_RknnSink_Sg__SetRange(std::vector< RknnSink > *self,int index,std::vector< RknnSink > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< TRTSink > *new_std_vector_Sl_TRTSink_Sg___SWIG_2(int capacity){
        std::vector< TRTSink >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< TRTSink >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN TRTSink std_vector_Sl_TRTSink_Sg__getitemcopy(std::vector< TRTSink > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< TRTSink >::value_type const &std_vector_Sl_TRTSink_Sg__getitem(std::vector< TRTSink > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TRTSink_Sg__setitem(std::vector< TRTSink > *self,int index,TRTSink const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TRTSink_Sg__AddRange(std::vector< TRTSink > *self,std::vector< TRTSink > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< TRTSink > *std_vector_Sl_TRTSink_Sg__GetRange(std::vector< TRTSink > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< TRTSink >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_TRTSink_Sg__Insert(std::vector< TRTSink > *self,int index,TRTSink const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TRTSink_Sg__InsertRange(std::vector< TRTSink > *self,int index,std::vector< TRTSink > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TRTSink_Sg__RemoveAt(std::vector< TRTSink > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_TRTSink_Sg__RemoveRange(std::vector< TRTSink > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< TRTSink > *std_vector_Sl_TRTSink_Sg__Repeat(TRTSink const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< TRTSink >(count, value);
      }
SWIGINTERN void std_vector_Sl_TRTSink_Sg__Reverse__SWIG_0(std::vector< TRTSink > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_TRTSink_Sg__Reverse__SWIG_1(std::vector< TRTSink > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_TRTSink_Sg__SetRange(std::vector< TRTSink > *self,int index,std::vector< TRTSink > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< PreProcessor > *new_std_vector_Sl_PreProcessor_Sg___SWIG_2(int capacity){
        std::vector< PreProcessor >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< PreProcessor >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN PreProcessor std_vector_Sl_PreProcessor_Sg__getitemcopy(std::vector< PreProcessor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< PreProcessor >::value_type const &std_vector_Sl_PreProcessor_Sg__getitem(std::vector< PreProcessor > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_PreProcessor_Sg__setitem(std::vector< PreProcessor > *self,int index,PreProcessor const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_PreProcessor_Sg__AddRange(std::vector< PreProcessor > *self,std::vector< PreProcessor > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< PreProcessor > *std_vector_Sl_PreProcessor_Sg__GetRange(std::vector< PreProcessor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< PreProcessor >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_PreProcessor_Sg__Insert(std::vector< PreProcessor > *self,int index,PreProcessor const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_PreProcessor_Sg__InsertRange(std::vector< PreProcessor > *self,int index,std::vector< PreProcessor > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_PreProcessor_Sg__RemoveAt(std::vector< PreProcessor > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_PreProcessor_Sg__RemoveRange(std::vector< PreProcessor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< PreProcessor > *std_vector_Sl_PreProcessor_Sg__Repeat(PreProcessor const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< PreProcessor >(count, value);
      }
SWIGINTERN void std_vector_Sl_PreProcessor_Sg__Reverse__SWIG_0(std::vector< PreProcessor > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_PreProcessor_Sg__Reverse__SWIG_1(std::vector< PreProcessor > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_PreProcessor_Sg__SetRange(std::vector< PreProcessor > *self,int index,std::vector< PreProcessor > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< SingleSourcePipeline > *new_std_vector_Sl_SingleSourcePipeline_Sg___SWIG_2(int capacity){
        std::vector< SingleSourcePipeline >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< SingleSourcePipeline >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN SingleSourcePipeline std_vector_Sl_SingleSourcePipeline_Sg__getitemcopy(std::vector< SingleSourcePipeline > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< SingleSourcePipeline >::value_type const &std_vector_Sl_SingleSourcePipeline_Sg__getitem(std::vector< SingleSourcePipeline > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SingleSourcePipeline_Sg__setitem(std::vector< SingleSourcePipeline > *self,int index,SingleSourcePipeline const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SingleSourcePipeline_Sg__AddRange(std::vector< SingleSourcePipeline > *self,std::vector< SingleSourcePipeline > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< SingleSourcePipeline > *std_vector_Sl_SingleSourcePipeline_Sg__GetRange(std::vector< SingleSourcePipeline > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< SingleSourcePipeline >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_SingleSourcePipeline_Sg__Insert(std::vector< SingleSourcePipeline > *self,int index,SingleSourcePipeline const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SingleSourcePipeline_Sg__InsertRange(std::vector< SingleSourcePipeline > *self,int index,std::vector< SingleSourcePipeline > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SingleSourcePipeline_Sg__RemoveAt(std::vector< SingleSourcePipeline > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SingleSourcePipeline_Sg__RemoveRange(std::vector< SingleSourcePipeline > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< SingleSourcePipeline > *std_vector_Sl_SingleSourcePipeline_Sg__Repeat(SingleSourcePipeline const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< SingleSourcePipeline >(count, value);
      }
SWIGINTERN void std_vector_Sl_SingleSourcePipeline_Sg__Reverse__SWIG_0(std::vector< SingleSourcePipeline > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_SingleSourcePipeline_Sg__Reverse__SWIG_1(std::vector< SingleSourcePipeline > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_SingleSourcePipeline_Sg__SetRange(std::vector< SingleSourcePipeline > *self,int index,std::vector< SingleSourcePipeline > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< IPipeline > *new_std_vector_Sl_IPipeline_Sg___SWIG_2(int capacity){
        std::vector< IPipeline >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< IPipeline >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN IPipeline std_vector_Sl_IPipeline_Sg__getitemcopy(std::vector< IPipeline > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< IPipeline >::value_type const &std_vector_Sl_IPipeline_Sg__getitem(std::vector< IPipeline > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_IPipeline_Sg__setitem(std::vector< IPipeline > *self,int index,IPipeline const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_IPipeline_Sg__AddRange(std::vector< IPipeline > *self,std::vector< IPipeline > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< IPipeline > *std_vector_Sl_IPipeline_Sg__GetRange(std::vector< IPipeline > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< IPipeline >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_IPipeline_Sg__Insert(std::vector< IPipeline > *self,int index,IPipeline const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_IPipeline_Sg__InsertRange(std::vector< IPipeline > *self,int index,std::vector< IPipeline > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_IPipeline_Sg__RemoveAt(std::vector< IPipeline > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_IPipeline_Sg__RemoveRange(std::vector< IPipeline > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< IPipeline > *std_vector_Sl_IPipeline_Sg__Repeat(IPipeline const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< IPipeline >(count, value);
      }
SWIGINTERN void std_vector_Sl_IPipeline_Sg__Reverse__SWIG_0(std::vector< IPipeline > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_IPipeline_Sg__Reverse__SWIG_1(std::vector< IPipeline > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_IPipeline_Sg__SetRange(std::vector< IPipeline > *self,int index,std::vector< IPipeline > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< SterioPipeline > *new_std_vector_Sl_SterioPipeline_Sg___SWIG_2(int capacity){
        std::vector< SterioPipeline >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< SterioPipeline >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN SterioPipeline std_vector_Sl_SterioPipeline_Sg__getitemcopy(std::vector< SterioPipeline > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< SterioPipeline >::value_type const &std_vector_Sl_SterioPipeline_Sg__getitem(std::vector< SterioPipeline > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SterioPipeline_Sg__setitem(std::vector< SterioPipeline > *self,int index,SterioPipeline const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SterioPipeline_Sg__AddRange(std::vector< SterioPipeline > *self,std::vector< SterioPipeline > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< SterioPipeline > *std_vector_Sl_SterioPipeline_Sg__GetRange(std::vector< SterioPipeline > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< SterioPipeline >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_SterioPipeline_Sg__Insert(std::vector< SterioPipeline > *self,int index,SterioPipeline const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SterioPipeline_Sg__InsertRange(std::vector< SterioPipeline > *self,int index,std::vector< SterioPipeline > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SterioPipeline_Sg__RemoveAt(std::vector< SterioPipeline > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_SterioPipeline_Sg__RemoveRange(std::vector< SterioPipeline > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< SterioPipeline > *std_vector_Sl_SterioPipeline_Sg__Repeat(SterioPipeline const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< SterioPipeline >(count, value);
      }
SWIGINTERN void std_vector_Sl_SterioPipeline_Sg__Reverse__SWIG_0(std::vector< SterioPipeline > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_SterioPipeline_Sg__Reverse__SWIG_1(std::vector< SterioPipeline > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_SterioPipeline_Sg__SetRange(std::vector< SterioPipeline > *self,int index,std::vector< SterioPipeline > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorString__SWIG_0() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorString__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_Clear(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_Add(void * jarg1, const char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->push_back((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorString_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorString_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorString_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorString__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_VectorString_getitemcopy(void * jarg1, int jarg2) {
  const char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_VectorString_getitem(void * jarg1, int jarg2) {
  const char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_setitem(void * jarg1, int jarg2, const char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorString_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_Insert(void * jarg1, int jarg2, const char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorString_Repeat(const char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorString_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorString_Contains(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorString_IndexOf(void * jarg1, const char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorString_LastIndexOf(void * jarg1, const char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorString_Remove(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorString(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorLogger__SWIG_0() {
  void * jresult ;
  std::vector< Logger > *result = 0 ;
  
  result = (std::vector< Logger > *)new std::vector< Logger >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorLogger__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Logger > *arg1 = 0 ;
  std::vector< Logger > *result = 0 ;
  
  arg1 = (std::vector< Logger > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Logger > const & is null", 0);
    return 0;
  } 
  result = (std::vector< Logger > *)new std::vector< Logger >((std::vector< Logger > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLogger_Clear(void * jarg1) {
  std::vector< Logger > *arg1 = (std::vector< Logger > *) 0 ;
  
  arg1 = (std::vector< Logger > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLogger_Add(void * jarg1, void * jarg2) {
  std::vector< Logger > *arg1 = (std::vector< Logger > *) 0 ;
  Logger *arg2 = 0 ;
  
  arg1 = (std::vector< Logger > *)jarg1; 
  arg2 = (Logger *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Logger const & is null", 0);
    return ;
  } 
  (arg1)->push_back((Logger const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorLogger_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< Logger > *arg1 = (std::vector< Logger > *) 0 ;
  std::vector< Logger >::size_type result;
  
  arg1 = (std::vector< Logger > *)jarg1; 
  result = ((std::vector< Logger > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorLogger_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< Logger > *arg1 = (std::vector< Logger > *) 0 ;
  bool result;
  
  arg1 = (std::vector< Logger > *)jarg1; 
  result = (bool)((std::vector< Logger > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorLogger_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< Logger > *arg1 = (std::vector< Logger > *) 0 ;
  std::vector< Logger >::size_type result;
  
  arg1 = (std::vector< Logger > *)jarg1; 
  result = ((std::vector< Logger > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLogger_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< Logger > *arg1 = (std::vector< Logger > *) 0 ;
  std::vector< Logger >::size_type arg2 ;
  
  arg1 = (std::vector< Logger > *)jarg1; 
  arg2 = (std::vector< Logger >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorLogger__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Logger > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Logger > *)new_std_vector_Sl_Logger_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorLogger_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Logger > *arg1 = (std::vector< Logger > *) 0 ;
  int arg2 ;
  Logger result;
  
  arg1 = (std::vector< Logger > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_Logger_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new Logger(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorLogger_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Logger > *arg1 = (std::vector< Logger > *) 0 ;
  int arg2 ;
  std::vector< Logger >::value_type *result = 0 ;
  
  arg1 = (std::vector< Logger > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Logger >::value_type *) &std_vector_Sl_Logger_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLogger_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Logger > *arg1 = (std::vector< Logger > *) 0 ;
  int arg2 ;
  Logger *arg3 = 0 ;
  
  arg1 = (std::vector< Logger > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Logger *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Logger const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Logger_Sg__setitem(arg1,arg2,(Logger const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLogger_AddRange(void * jarg1, void * jarg2) {
  std::vector< Logger > *arg1 = (std::vector< Logger > *) 0 ;
  std::vector< Logger > *arg2 = 0 ;
  
  arg1 = (std::vector< Logger > *)jarg1; 
  arg2 = (std::vector< Logger > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Logger > const & is null", 0);
    return ;
  } 
  std_vector_Sl_Logger_Sg__AddRange(arg1,(std::vector< Logger > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorLogger_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Logger > *arg1 = (std::vector< Logger > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Logger > *result = 0 ;
  
  arg1 = (std::vector< Logger > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Logger > *)std_vector_Sl_Logger_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLogger_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Logger > *arg1 = (std::vector< Logger > *) 0 ;
  int arg2 ;
  Logger *arg3 = 0 ;
  
  arg1 = (std::vector< Logger > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Logger *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Logger const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Logger_Sg__Insert(arg1,arg2,(Logger const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLogger_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Logger > *arg1 = (std::vector< Logger > *) 0 ;
  int arg2 ;
  std::vector< Logger > *arg3 = 0 ;
  
  arg1 = (std::vector< Logger > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Logger > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Logger > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Logger_Sg__InsertRange(arg1,arg2,(std::vector< Logger > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLogger_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Logger > *arg1 = (std::vector< Logger > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Logger > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Logger_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLogger_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Logger > *arg1 = (std::vector< Logger > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Logger > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Logger_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorLogger_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Logger *arg1 = 0 ;
  int arg2 ;
  std::vector< Logger > *result = 0 ;
  
  arg1 = (Logger *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Logger const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Logger > *)std_vector_Sl_Logger_Sg__Repeat((Logger const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLogger_Reverse__SWIG_0(void * jarg1) {
  std::vector< Logger > *arg1 = (std::vector< Logger > *) 0 ;
  
  arg1 = (std::vector< Logger > *)jarg1; 
  std_vector_Sl_Logger_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLogger_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Logger > *arg1 = (std::vector< Logger > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Logger > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Logger_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLogger_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Logger > *arg1 = (std::vector< Logger > *) 0 ;
  int arg2 ;
  std::vector< Logger > *arg3 = 0 ;
  
  arg1 = (std::vector< Logger > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Logger > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Logger > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Logger_Sg__SetRange(arg1,arg2,(std::vector< Logger > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorLogger(void * jarg1) {
  std::vector< Logger > *arg1 = (std::vector< Logger > *) 0 ;
  
  arg1 = (std::vector< Logger > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorLog__SWIG_0() {
  void * jresult ;
  std::vector< Log > *result = 0 ;
  
  result = (std::vector< Log > *)new std::vector< Log >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorLog__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Log > *arg1 = 0 ;
  std::vector< Log > *result = 0 ;
  
  arg1 = (std::vector< Log > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Log > const & is null", 0);
    return 0;
  } 
  result = (std::vector< Log > *)new std::vector< Log >((std::vector< Log > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_Clear(void * jarg1) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_Add(void * jarg1, void * jarg2) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  Log *arg2 = 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (Log *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Log const & is null", 0);
    return ;
  } 
  (arg1)->push_back((Log const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorLog_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  std::vector< Log >::size_type result;
  
  arg1 = (std::vector< Log > *)jarg1; 
  result = ((std::vector< Log > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorLog_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  bool result;
  
  arg1 = (std::vector< Log > *)jarg1; 
  result = (bool)((std::vector< Log > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorLog_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  std::vector< Log >::size_type result;
  
  arg1 = (std::vector< Log > *)jarg1; 
  result = ((std::vector< Log > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  std::vector< Log >::size_type arg2 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (std::vector< Log >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorLog__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Log > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Log > *)new_std_vector_Sl_Log_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorLog_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  int arg2 ;
  SwigValueWrapper< Log > result;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_Log_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new Log(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorLog_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  int arg2 ;
  std::vector< Log >::value_type *result = 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Log >::value_type *) &std_vector_Sl_Log_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  int arg2 ;
  Log *arg3 = 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Log *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Log const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Log_Sg__setitem(arg1,arg2,(Log const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_AddRange(void * jarg1, void * jarg2) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  std::vector< Log > *arg2 = 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (std::vector< Log > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Log > const & is null", 0);
    return ;
  } 
  std_vector_Sl_Log_Sg__AddRange(arg1,(std::vector< Log > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorLog_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Log > *result = 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Log > *)std_vector_Sl_Log_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  int arg2 ;
  Log *arg3 = 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Log *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Log const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Log_Sg__Insert(arg1,arg2,(Log const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  int arg2 ;
  std::vector< Log > *arg3 = 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Log > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Log > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Log_Sg__InsertRange(arg1,arg2,(std::vector< Log > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Log_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Log_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorLog_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Log *arg1 = 0 ;
  int arg2 ;
  std::vector< Log > *result = 0 ;
  
  arg1 = (Log *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Log const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Log > *)std_vector_Sl_Log_Sg__Repeat((Log const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_Reverse__SWIG_0(void * jarg1) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  std_vector_Sl_Log_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Log_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorLog_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  int arg2 ;
  std::vector< Log > *arg3 = 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Log > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Log > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Log_Sg__SetRange(arg1,arg2,(std::vector< Log > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorLog(void * jarg1) {
  std::vector< Log > *arg1 = (std::vector< Log > *) 0 ;
  
  arg1 = (std::vector< Log > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorIFrameSource__SWIG_0() {
  void * jresult ;
  std::vector< IFrameSource > *result = 0 ;
  
  result = (std::vector< IFrameSource > *)new std::vector< IFrameSource >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorIFrameSource__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< IFrameSource > *arg1 = 0 ;
  std::vector< IFrameSource > *result = 0 ;
  
  arg1 = (std::vector< IFrameSource > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< IFrameSource > const & is null", 0);
    return 0;
  } 
  result = (std::vector< IFrameSource > *)new std::vector< IFrameSource >((std::vector< IFrameSource > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIFrameSource_Clear(void * jarg1) {
  std::vector< IFrameSource > *arg1 = (std::vector< IFrameSource > *) 0 ;
  
  arg1 = (std::vector< IFrameSource > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIFrameSource_Add(void * jarg1, void * jarg2) {
  std::vector< IFrameSource > *arg1 = (std::vector< IFrameSource > *) 0 ;
  IFrameSource *arg2 = 0 ;
  
  arg1 = (std::vector< IFrameSource > *)jarg1; 
  arg2 = (IFrameSource *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IFrameSource const & is null", 0);
    return ;
  } 
  (arg1)->push_back((IFrameSource const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorIFrameSource_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< IFrameSource > *arg1 = (std::vector< IFrameSource > *) 0 ;
  std::vector< IFrameSource >::size_type result;
  
  arg1 = (std::vector< IFrameSource > *)jarg1; 
  result = ((std::vector< IFrameSource > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorIFrameSource_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< IFrameSource > *arg1 = (std::vector< IFrameSource > *) 0 ;
  bool result;
  
  arg1 = (std::vector< IFrameSource > *)jarg1; 
  result = (bool)((std::vector< IFrameSource > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorIFrameSource_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< IFrameSource > *arg1 = (std::vector< IFrameSource > *) 0 ;
  std::vector< IFrameSource >::size_type result;
  
  arg1 = (std::vector< IFrameSource > *)jarg1; 
  result = ((std::vector< IFrameSource > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIFrameSource_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< IFrameSource > *arg1 = (std::vector< IFrameSource > *) 0 ;
  std::vector< IFrameSource >::size_type arg2 ;
  
  arg1 = (std::vector< IFrameSource > *)jarg1; 
  arg2 = (std::vector< IFrameSource >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorIFrameSource__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< IFrameSource > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< IFrameSource > *)new_std_vector_Sl_IFrameSource_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorIFrameSource_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< IFrameSource > *arg1 = (std::vector< IFrameSource > *) 0 ;
  int arg2 ;
  SwigValueWrapper< IFrameSource > result;
  
  arg1 = (std::vector< IFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_IFrameSource_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new IFrameSource(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorIFrameSource_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< IFrameSource > *arg1 = (std::vector< IFrameSource > *) 0 ;
  int arg2 ;
  std::vector< IFrameSource >::value_type *result = 0 ;
  
  arg1 = (std::vector< IFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< IFrameSource >::value_type *) &std_vector_Sl_IFrameSource_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIFrameSource_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< IFrameSource > *arg1 = (std::vector< IFrameSource > *) 0 ;
  int arg2 ;
  IFrameSource *arg3 = 0 ;
  
  arg1 = (std::vector< IFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (IFrameSource *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IFrameSource const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_IFrameSource_Sg__setitem(arg1,arg2,(IFrameSource const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIFrameSource_AddRange(void * jarg1, void * jarg2) {
  std::vector< IFrameSource > *arg1 = (std::vector< IFrameSource > *) 0 ;
  std::vector< IFrameSource > *arg2 = 0 ;
  
  arg1 = (std::vector< IFrameSource > *)jarg1; 
  arg2 = (std::vector< IFrameSource > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< IFrameSource > const & is null", 0);
    return ;
  } 
  std_vector_Sl_IFrameSource_Sg__AddRange(arg1,(std::vector< IFrameSource > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorIFrameSource_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< IFrameSource > *arg1 = (std::vector< IFrameSource > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< IFrameSource > *result = 0 ;
  
  arg1 = (std::vector< IFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< IFrameSource > *)std_vector_Sl_IFrameSource_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIFrameSource_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< IFrameSource > *arg1 = (std::vector< IFrameSource > *) 0 ;
  int arg2 ;
  IFrameSource *arg3 = 0 ;
  
  arg1 = (std::vector< IFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (IFrameSource *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IFrameSource const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_IFrameSource_Sg__Insert(arg1,arg2,(IFrameSource const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIFrameSource_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< IFrameSource > *arg1 = (std::vector< IFrameSource > *) 0 ;
  int arg2 ;
  std::vector< IFrameSource > *arg3 = 0 ;
  
  arg1 = (std::vector< IFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< IFrameSource > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< IFrameSource > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_IFrameSource_Sg__InsertRange(arg1,arg2,(std::vector< IFrameSource > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIFrameSource_RemoveAt(void * jarg1, int jarg2) {
  std::vector< IFrameSource > *arg1 = (std::vector< IFrameSource > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< IFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_IFrameSource_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIFrameSource_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< IFrameSource > *arg1 = (std::vector< IFrameSource > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< IFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_IFrameSource_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorIFrameSource_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  IFrameSource *arg1 = 0 ;
  int arg2 ;
  std::vector< IFrameSource > *result = 0 ;
  
  arg1 = (IFrameSource *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IFrameSource const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< IFrameSource > *)std_vector_Sl_IFrameSource_Sg__Repeat((IFrameSource const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIFrameSource_Reverse__SWIG_0(void * jarg1) {
  std::vector< IFrameSource > *arg1 = (std::vector< IFrameSource > *) 0 ;
  
  arg1 = (std::vector< IFrameSource > *)jarg1; 
  std_vector_Sl_IFrameSource_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIFrameSource_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< IFrameSource > *arg1 = (std::vector< IFrameSource > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< IFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_IFrameSource_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIFrameSource_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< IFrameSource > *arg1 = (std::vector< IFrameSource > *) 0 ;
  int arg2 ;
  std::vector< IFrameSource > *arg3 = 0 ;
  
  arg1 = (std::vector< IFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< IFrameSource > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< IFrameSource > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_IFrameSource_Sg__SetRange(arg1,arg2,(std::vector< IFrameSource > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorIFrameSource(void * jarg1) {
  std::vector< IFrameSource > *arg1 = (std::vector< IFrameSource > *) 0 ;
  
  arg1 = (std::vector< IFrameSource > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorImageFileFrameSource__SWIG_0() {
  void * jresult ;
  std::vector< ImageFileFrameSource > *result = 0 ;
  
  result = (std::vector< ImageFileFrameSource > *)new std::vector< ImageFileFrameSource >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorImageFileFrameSource__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< ImageFileFrameSource > *arg1 = 0 ;
  std::vector< ImageFileFrameSource > *result = 0 ;
  
  arg1 = (std::vector< ImageFileFrameSource > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ImageFileFrameSource > const & is null", 0);
    return 0;
  } 
  result = (std::vector< ImageFileFrameSource > *)new std::vector< ImageFileFrameSource >((std::vector< ImageFileFrameSource > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImageFileFrameSource_Clear(void * jarg1) {
  std::vector< ImageFileFrameSource > *arg1 = (std::vector< ImageFileFrameSource > *) 0 ;
  
  arg1 = (std::vector< ImageFileFrameSource > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImageFileFrameSource_Add(void * jarg1, void * jarg2) {
  std::vector< ImageFileFrameSource > *arg1 = (std::vector< ImageFileFrameSource > *) 0 ;
  ImageFileFrameSource *arg2 = 0 ;
  
  arg1 = (std::vector< ImageFileFrameSource > *)jarg1; 
  arg2 = (ImageFileFrameSource *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImageFileFrameSource const & is null", 0);
    return ;
  } 
  (arg1)->push_back((ImageFileFrameSource const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorImageFileFrameSource_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< ImageFileFrameSource > *arg1 = (std::vector< ImageFileFrameSource > *) 0 ;
  std::vector< ImageFileFrameSource >::size_type result;
  
  arg1 = (std::vector< ImageFileFrameSource > *)jarg1; 
  result = ((std::vector< ImageFileFrameSource > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorImageFileFrameSource_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< ImageFileFrameSource > *arg1 = (std::vector< ImageFileFrameSource > *) 0 ;
  bool result;
  
  arg1 = (std::vector< ImageFileFrameSource > *)jarg1; 
  result = (bool)((std::vector< ImageFileFrameSource > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorImageFileFrameSource_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< ImageFileFrameSource > *arg1 = (std::vector< ImageFileFrameSource > *) 0 ;
  std::vector< ImageFileFrameSource >::size_type result;
  
  arg1 = (std::vector< ImageFileFrameSource > *)jarg1; 
  result = ((std::vector< ImageFileFrameSource > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImageFileFrameSource_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< ImageFileFrameSource > *arg1 = (std::vector< ImageFileFrameSource > *) 0 ;
  std::vector< ImageFileFrameSource >::size_type arg2 ;
  
  arg1 = (std::vector< ImageFileFrameSource > *)jarg1; 
  arg2 = (std::vector< ImageFileFrameSource >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorImageFileFrameSource__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< ImageFileFrameSource > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< ImageFileFrameSource > *)new_std_vector_Sl_ImageFileFrameSource_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorImageFileFrameSource_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ImageFileFrameSource > *arg1 = (std::vector< ImageFileFrameSource > *) 0 ;
  int arg2 ;
  SwigValueWrapper< ImageFileFrameSource > result;
  
  arg1 = (std::vector< ImageFileFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_ImageFileFrameSource_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new ImageFileFrameSource(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorImageFileFrameSource_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ImageFileFrameSource > *arg1 = (std::vector< ImageFileFrameSource > *) 0 ;
  int arg2 ;
  std::vector< ImageFileFrameSource >::value_type *result = 0 ;
  
  arg1 = (std::vector< ImageFileFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ImageFileFrameSource >::value_type *) &std_vector_Sl_ImageFileFrameSource_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImageFileFrameSource_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ImageFileFrameSource > *arg1 = (std::vector< ImageFileFrameSource > *) 0 ;
  int arg2 ;
  ImageFileFrameSource *arg3 = 0 ;
  
  arg1 = (std::vector< ImageFileFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ImageFileFrameSource *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImageFileFrameSource const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ImageFileFrameSource_Sg__setitem(arg1,arg2,(ImageFileFrameSource const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImageFileFrameSource_AddRange(void * jarg1, void * jarg2) {
  std::vector< ImageFileFrameSource > *arg1 = (std::vector< ImageFileFrameSource > *) 0 ;
  std::vector< ImageFileFrameSource > *arg2 = 0 ;
  
  arg1 = (std::vector< ImageFileFrameSource > *)jarg1; 
  arg2 = (std::vector< ImageFileFrameSource > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ImageFileFrameSource > const & is null", 0);
    return ;
  } 
  std_vector_Sl_ImageFileFrameSource_Sg__AddRange(arg1,(std::vector< ImageFileFrameSource > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorImageFileFrameSource_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< ImageFileFrameSource > *arg1 = (std::vector< ImageFileFrameSource > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< ImageFileFrameSource > *result = 0 ;
  
  arg1 = (std::vector< ImageFileFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< ImageFileFrameSource > *)std_vector_Sl_ImageFileFrameSource_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImageFileFrameSource_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ImageFileFrameSource > *arg1 = (std::vector< ImageFileFrameSource > *) 0 ;
  int arg2 ;
  ImageFileFrameSource *arg3 = 0 ;
  
  arg1 = (std::vector< ImageFileFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ImageFileFrameSource *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImageFileFrameSource const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ImageFileFrameSource_Sg__Insert(arg1,arg2,(ImageFileFrameSource const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImageFileFrameSource_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ImageFileFrameSource > *arg1 = (std::vector< ImageFileFrameSource > *) 0 ;
  int arg2 ;
  std::vector< ImageFileFrameSource > *arg3 = 0 ;
  
  arg1 = (std::vector< ImageFileFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ImageFileFrameSource > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ImageFileFrameSource > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ImageFileFrameSource_Sg__InsertRange(arg1,arg2,(std::vector< ImageFileFrameSource > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImageFileFrameSource_RemoveAt(void * jarg1, int jarg2) {
  std::vector< ImageFileFrameSource > *arg1 = (std::vector< ImageFileFrameSource > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< ImageFileFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_ImageFileFrameSource_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImageFileFrameSource_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< ImageFileFrameSource > *arg1 = (std::vector< ImageFileFrameSource > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ImageFileFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ImageFileFrameSource_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorImageFileFrameSource_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  ImageFileFrameSource *arg1 = 0 ;
  int arg2 ;
  std::vector< ImageFileFrameSource > *result = 0 ;
  
  arg1 = (ImageFileFrameSource *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImageFileFrameSource const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ImageFileFrameSource > *)std_vector_Sl_ImageFileFrameSource_Sg__Repeat((ImageFileFrameSource const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImageFileFrameSource_Reverse__SWIG_0(void * jarg1) {
  std::vector< ImageFileFrameSource > *arg1 = (std::vector< ImageFileFrameSource > *) 0 ;
  
  arg1 = (std::vector< ImageFileFrameSource > *)jarg1; 
  std_vector_Sl_ImageFileFrameSource_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImageFileFrameSource_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< ImageFileFrameSource > *arg1 = (std::vector< ImageFileFrameSource > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ImageFileFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ImageFileFrameSource_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorImageFileFrameSource_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ImageFileFrameSource > *arg1 = (std::vector< ImageFileFrameSource > *) 0 ;
  int arg2 ;
  std::vector< ImageFileFrameSource > *arg3 = 0 ;
  
  arg1 = (std::vector< ImageFileFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ImageFileFrameSource > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ImageFileFrameSource > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ImageFileFrameSource_Sg__SetRange(arg1,arg2,(std::vector< ImageFileFrameSource > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorImageFileFrameSource(void * jarg1) {
  std::vector< ImageFileFrameSource > *arg1 = (std::vector< ImageFileFrameSource > *) 0 ;
  
  arg1 = (std::vector< ImageFileFrameSource > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorVideoFileFrameSource__SWIG_0() {
  void * jresult ;
  std::vector< VideoFileFrameSource > *result = 0 ;
  
  result = (std::vector< VideoFileFrameSource > *)new std::vector< VideoFileFrameSource >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorVideoFileFrameSource__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< VideoFileFrameSource > *arg1 = 0 ;
  std::vector< VideoFileFrameSource > *result = 0 ;
  
  arg1 = (std::vector< VideoFileFrameSource > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< VideoFileFrameSource > const & is null", 0);
    return 0;
  } 
  result = (std::vector< VideoFileFrameSource > *)new std::vector< VideoFileFrameSource >((std::vector< VideoFileFrameSource > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorVideoFileFrameSource_Clear(void * jarg1) {
  std::vector< VideoFileFrameSource > *arg1 = (std::vector< VideoFileFrameSource > *) 0 ;
  
  arg1 = (std::vector< VideoFileFrameSource > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorVideoFileFrameSource_Add(void * jarg1, void * jarg2) {
  std::vector< VideoFileFrameSource > *arg1 = (std::vector< VideoFileFrameSource > *) 0 ;
  VideoFileFrameSource *arg2 = 0 ;
  
  arg1 = (std::vector< VideoFileFrameSource > *)jarg1; 
  arg2 = (VideoFileFrameSource *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VideoFileFrameSource const & is null", 0);
    return ;
  } 
  (arg1)->push_back((VideoFileFrameSource const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorVideoFileFrameSource_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< VideoFileFrameSource > *arg1 = (std::vector< VideoFileFrameSource > *) 0 ;
  std::vector< VideoFileFrameSource >::size_type result;
  
  arg1 = (std::vector< VideoFileFrameSource > *)jarg1; 
  result = ((std::vector< VideoFileFrameSource > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorVideoFileFrameSource_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< VideoFileFrameSource > *arg1 = (std::vector< VideoFileFrameSource > *) 0 ;
  bool result;
  
  arg1 = (std::vector< VideoFileFrameSource > *)jarg1; 
  result = (bool)((std::vector< VideoFileFrameSource > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorVideoFileFrameSource_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< VideoFileFrameSource > *arg1 = (std::vector< VideoFileFrameSource > *) 0 ;
  std::vector< VideoFileFrameSource >::size_type result;
  
  arg1 = (std::vector< VideoFileFrameSource > *)jarg1; 
  result = ((std::vector< VideoFileFrameSource > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorVideoFileFrameSource_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< VideoFileFrameSource > *arg1 = (std::vector< VideoFileFrameSource > *) 0 ;
  std::vector< VideoFileFrameSource >::size_type arg2 ;
  
  arg1 = (std::vector< VideoFileFrameSource > *)jarg1; 
  arg2 = (std::vector< VideoFileFrameSource >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorVideoFileFrameSource__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< VideoFileFrameSource > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< VideoFileFrameSource > *)new_std_vector_Sl_VideoFileFrameSource_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorVideoFileFrameSource_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< VideoFileFrameSource > *arg1 = (std::vector< VideoFileFrameSource > *) 0 ;
  int arg2 ;
  SwigValueWrapper< VideoFileFrameSource > result;
  
  arg1 = (std::vector< VideoFileFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_VideoFileFrameSource_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new VideoFileFrameSource(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorVideoFileFrameSource_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< VideoFileFrameSource > *arg1 = (std::vector< VideoFileFrameSource > *) 0 ;
  int arg2 ;
  std::vector< VideoFileFrameSource >::value_type *result = 0 ;
  
  arg1 = (std::vector< VideoFileFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< VideoFileFrameSource >::value_type *) &std_vector_Sl_VideoFileFrameSource_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorVideoFileFrameSource_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< VideoFileFrameSource > *arg1 = (std::vector< VideoFileFrameSource > *) 0 ;
  int arg2 ;
  VideoFileFrameSource *arg3 = 0 ;
  
  arg1 = (std::vector< VideoFileFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (VideoFileFrameSource *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VideoFileFrameSource const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_VideoFileFrameSource_Sg__setitem(arg1,arg2,(VideoFileFrameSource const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorVideoFileFrameSource_AddRange(void * jarg1, void * jarg2) {
  std::vector< VideoFileFrameSource > *arg1 = (std::vector< VideoFileFrameSource > *) 0 ;
  std::vector< VideoFileFrameSource > *arg2 = 0 ;
  
  arg1 = (std::vector< VideoFileFrameSource > *)jarg1; 
  arg2 = (std::vector< VideoFileFrameSource > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< VideoFileFrameSource > const & is null", 0);
    return ;
  } 
  std_vector_Sl_VideoFileFrameSource_Sg__AddRange(arg1,(std::vector< VideoFileFrameSource > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorVideoFileFrameSource_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< VideoFileFrameSource > *arg1 = (std::vector< VideoFileFrameSource > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< VideoFileFrameSource > *result = 0 ;
  
  arg1 = (std::vector< VideoFileFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< VideoFileFrameSource > *)std_vector_Sl_VideoFileFrameSource_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorVideoFileFrameSource_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< VideoFileFrameSource > *arg1 = (std::vector< VideoFileFrameSource > *) 0 ;
  int arg2 ;
  VideoFileFrameSource *arg3 = 0 ;
  
  arg1 = (std::vector< VideoFileFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (VideoFileFrameSource *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VideoFileFrameSource const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_VideoFileFrameSource_Sg__Insert(arg1,arg2,(VideoFileFrameSource const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorVideoFileFrameSource_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< VideoFileFrameSource > *arg1 = (std::vector< VideoFileFrameSource > *) 0 ;
  int arg2 ;
  std::vector< VideoFileFrameSource > *arg3 = 0 ;
  
  arg1 = (std::vector< VideoFileFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< VideoFileFrameSource > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< VideoFileFrameSource > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_VideoFileFrameSource_Sg__InsertRange(arg1,arg2,(std::vector< VideoFileFrameSource > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorVideoFileFrameSource_RemoveAt(void * jarg1, int jarg2) {
  std::vector< VideoFileFrameSource > *arg1 = (std::vector< VideoFileFrameSource > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< VideoFileFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_VideoFileFrameSource_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorVideoFileFrameSource_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< VideoFileFrameSource > *arg1 = (std::vector< VideoFileFrameSource > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< VideoFileFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_VideoFileFrameSource_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorVideoFileFrameSource_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  VideoFileFrameSource *arg1 = 0 ;
  int arg2 ;
  std::vector< VideoFileFrameSource > *result = 0 ;
  
  arg1 = (VideoFileFrameSource *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "VideoFileFrameSource const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< VideoFileFrameSource > *)std_vector_Sl_VideoFileFrameSource_Sg__Repeat((VideoFileFrameSource const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorVideoFileFrameSource_Reverse__SWIG_0(void * jarg1) {
  std::vector< VideoFileFrameSource > *arg1 = (std::vector< VideoFileFrameSource > *) 0 ;
  
  arg1 = (std::vector< VideoFileFrameSource > *)jarg1; 
  std_vector_Sl_VideoFileFrameSource_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorVideoFileFrameSource_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< VideoFileFrameSource > *arg1 = (std::vector< VideoFileFrameSource > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< VideoFileFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_VideoFileFrameSource_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorVideoFileFrameSource_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< VideoFileFrameSource > *arg1 = (std::vector< VideoFileFrameSource > *) 0 ;
  int arg2 ;
  std::vector< VideoFileFrameSource > *arg3 = 0 ;
  
  arg1 = (std::vector< VideoFileFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< VideoFileFrameSource > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< VideoFileFrameSource > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_VideoFileFrameSource_Sg__SetRange(arg1,arg2,(std::vector< VideoFileFrameSource > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorVideoFileFrameSource(void * jarg1) {
  std::vector< VideoFileFrameSource > *arg1 = (std::vector< VideoFileFrameSource > *) 0 ;
  
  arg1 = (std::vector< VideoFileFrameSource > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorCameraFrameSource__SWIG_0() {
  void * jresult ;
  std::vector< CameraFrameSource > *result = 0 ;
  
  result = (std::vector< CameraFrameSource > *)new std::vector< CameraFrameSource >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorCameraFrameSource__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< CameraFrameSource > *arg1 = 0 ;
  std::vector< CameraFrameSource > *result = 0 ;
  
  arg1 = (std::vector< CameraFrameSource > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CameraFrameSource > const & is null", 0);
    return 0;
  } 
  result = (std::vector< CameraFrameSource > *)new std::vector< CameraFrameSource >((std::vector< CameraFrameSource > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraFrameSource_Clear(void * jarg1) {
  std::vector< CameraFrameSource > *arg1 = (std::vector< CameraFrameSource > *) 0 ;
  
  arg1 = (std::vector< CameraFrameSource > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraFrameSource_Add(void * jarg1, void * jarg2) {
  std::vector< CameraFrameSource > *arg1 = (std::vector< CameraFrameSource > *) 0 ;
  CameraFrameSource *arg2 = 0 ;
  
  arg1 = (std::vector< CameraFrameSource > *)jarg1; 
  arg2 = (CameraFrameSource *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CameraFrameSource const & is null", 0);
    return ;
  } 
  (arg1)->push_back((CameraFrameSource const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorCameraFrameSource_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< CameraFrameSource > *arg1 = (std::vector< CameraFrameSource > *) 0 ;
  std::vector< CameraFrameSource >::size_type result;
  
  arg1 = (std::vector< CameraFrameSource > *)jarg1; 
  result = ((std::vector< CameraFrameSource > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorCameraFrameSource_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< CameraFrameSource > *arg1 = (std::vector< CameraFrameSource > *) 0 ;
  bool result;
  
  arg1 = (std::vector< CameraFrameSource > *)jarg1; 
  result = (bool)((std::vector< CameraFrameSource > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorCameraFrameSource_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< CameraFrameSource > *arg1 = (std::vector< CameraFrameSource > *) 0 ;
  std::vector< CameraFrameSource >::size_type result;
  
  arg1 = (std::vector< CameraFrameSource > *)jarg1; 
  result = ((std::vector< CameraFrameSource > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraFrameSource_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< CameraFrameSource > *arg1 = (std::vector< CameraFrameSource > *) 0 ;
  std::vector< CameraFrameSource >::size_type arg2 ;
  
  arg1 = (std::vector< CameraFrameSource > *)jarg1; 
  arg2 = (std::vector< CameraFrameSource >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorCameraFrameSource__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< CameraFrameSource > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< CameraFrameSource > *)new_std_vector_Sl_CameraFrameSource_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorCameraFrameSource_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< CameraFrameSource > *arg1 = (std::vector< CameraFrameSource > *) 0 ;
  int arg2 ;
  SwigValueWrapper< CameraFrameSource > result;
  
  arg1 = (std::vector< CameraFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_CameraFrameSource_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new CameraFrameSource(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorCameraFrameSource_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< CameraFrameSource > *arg1 = (std::vector< CameraFrameSource > *) 0 ;
  int arg2 ;
  std::vector< CameraFrameSource >::value_type *result = 0 ;
  
  arg1 = (std::vector< CameraFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< CameraFrameSource >::value_type *) &std_vector_Sl_CameraFrameSource_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraFrameSource_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CameraFrameSource > *arg1 = (std::vector< CameraFrameSource > *) 0 ;
  int arg2 ;
  CameraFrameSource *arg3 = 0 ;
  
  arg1 = (std::vector< CameraFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (CameraFrameSource *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CameraFrameSource const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_CameraFrameSource_Sg__setitem(arg1,arg2,(CameraFrameSource const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraFrameSource_AddRange(void * jarg1, void * jarg2) {
  std::vector< CameraFrameSource > *arg1 = (std::vector< CameraFrameSource > *) 0 ;
  std::vector< CameraFrameSource > *arg2 = 0 ;
  
  arg1 = (std::vector< CameraFrameSource > *)jarg1; 
  arg2 = (std::vector< CameraFrameSource > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CameraFrameSource > const & is null", 0);
    return ;
  } 
  std_vector_Sl_CameraFrameSource_Sg__AddRange(arg1,(std::vector< CameraFrameSource > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorCameraFrameSource_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< CameraFrameSource > *arg1 = (std::vector< CameraFrameSource > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< CameraFrameSource > *result = 0 ;
  
  arg1 = (std::vector< CameraFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< CameraFrameSource > *)std_vector_Sl_CameraFrameSource_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraFrameSource_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CameraFrameSource > *arg1 = (std::vector< CameraFrameSource > *) 0 ;
  int arg2 ;
  CameraFrameSource *arg3 = 0 ;
  
  arg1 = (std::vector< CameraFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (CameraFrameSource *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CameraFrameSource const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_CameraFrameSource_Sg__Insert(arg1,arg2,(CameraFrameSource const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraFrameSource_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CameraFrameSource > *arg1 = (std::vector< CameraFrameSource > *) 0 ;
  int arg2 ;
  std::vector< CameraFrameSource > *arg3 = 0 ;
  
  arg1 = (std::vector< CameraFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< CameraFrameSource > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CameraFrameSource > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_CameraFrameSource_Sg__InsertRange(arg1,arg2,(std::vector< CameraFrameSource > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraFrameSource_RemoveAt(void * jarg1, int jarg2) {
  std::vector< CameraFrameSource > *arg1 = (std::vector< CameraFrameSource > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< CameraFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_CameraFrameSource_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraFrameSource_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< CameraFrameSource > *arg1 = (std::vector< CameraFrameSource > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< CameraFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_CameraFrameSource_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorCameraFrameSource_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  CameraFrameSource *arg1 = 0 ;
  int arg2 ;
  std::vector< CameraFrameSource > *result = 0 ;
  
  arg1 = (CameraFrameSource *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CameraFrameSource const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< CameraFrameSource > *)std_vector_Sl_CameraFrameSource_Sg__Repeat((CameraFrameSource const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraFrameSource_Reverse__SWIG_0(void * jarg1) {
  std::vector< CameraFrameSource > *arg1 = (std::vector< CameraFrameSource > *) 0 ;
  
  arg1 = (std::vector< CameraFrameSource > *)jarg1; 
  std_vector_Sl_CameraFrameSource_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraFrameSource_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< CameraFrameSource > *arg1 = (std::vector< CameraFrameSource > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< CameraFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_CameraFrameSource_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorCameraFrameSource_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< CameraFrameSource > *arg1 = (std::vector< CameraFrameSource > *) 0 ;
  int arg2 ;
  std::vector< CameraFrameSource > *arg3 = 0 ;
  
  arg1 = (std::vector< CameraFrameSource > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< CameraFrameSource > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< CameraFrameSource > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_CameraFrameSource_Sg__SetRange(arg1,arg2,(std::vector< CameraFrameSource > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorCameraFrameSource(void * jarg1) {
  std::vector< CameraFrameSource > *arg1 = (std::vector< CameraFrameSource > *) 0 ;
  
  arg1 = (std::vector< CameraFrameSource > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorFramePool__SWIG_0() {
  void * jresult ;
  std::vector< FramePool > *result = 0 ;
  
  result = (std::vector< FramePool > *)new std::vector< FramePool >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorFramePool__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< FramePool > *arg1 = 0 ;
  std::vector< FramePool > *result = 0 ;
  
  arg1 = (std::vector< FramePool > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< FramePool > const & is null", 0);
    return 0;
  } 
  result = (std::vector< FramePool > *)new std::vector< FramePool >((std::vector< FramePool > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFramePool_Clear(void * jarg1) {
  std::vector< FramePool > *arg1 = (std::vector< FramePool > *) 0 ;
  
  arg1 = (std::vector< FramePool > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFramePool_Add(void * jarg1, void * jarg2) {
  std::vector< FramePool > *arg1 = (std::vector< FramePool > *) 0 ;
  FramePool *arg2 = 0 ;
  
  arg1 = (std::vector< FramePool > *)jarg1; 
  arg2 = (FramePool *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FramePool const & is null", 0);
    return ;
  } 
  (arg1)->push_back((FramePool const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorFramePool_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< FramePool > *arg1 = (std::vector< FramePool > *) 0 ;
  std::vector< FramePool >::size_type result;
  
  arg1 = (std::vector< FramePool > *)jarg1; 
  result = ((std::vector< FramePool > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorFramePool_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< FramePool > *arg1 = (std::vector< FramePool > *) 0 ;
  bool result;
  
  arg1 = (std::vector< FramePool > *)jarg1; 
  result = (bool)((std::vector< FramePool > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorFramePool_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< FramePool > *arg1 = (std::vector< FramePool > *) 0 ;
  std::vector< FramePool >::size_type result;
  
  arg1 = (std::vector< FramePool > *)jarg1; 
  result = ((std::vector< FramePool > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFramePool_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< FramePool > *arg1 = (std::vector< FramePool > *) 0 ;
  std::vector< FramePool >::size_type arg2 ;
  
  arg1 = (std::vector< FramePool > *)jarg1; 
  arg2 = (std::vector< FramePool >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorFramePool__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< FramePool > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< FramePool > *)new_std_vector_Sl_FramePool_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorFramePool_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< FramePool > *arg1 = (std::vector< FramePool > *) 0 ;
  int arg2 ;
  SwigValueWrapper< FramePool > result;
  
  arg1 = (std::vector< FramePool > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_FramePool_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new FramePool(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorFramePool_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< FramePool > *arg1 = (std::vector< FramePool > *) 0 ;
  int arg2 ;
  std::vector< FramePool >::value_type *result = 0 ;
  
  arg1 = (std::vector< FramePool > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< FramePool >::value_type *) &std_vector_Sl_FramePool_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFramePool_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< FramePool > *arg1 = (std::vector< FramePool > *) 0 ;
  int arg2 ;
  FramePool *arg3 = 0 ;
  
  arg1 = (std::vector< FramePool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (FramePool *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FramePool const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_FramePool_Sg__setitem(arg1,arg2,(FramePool const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFramePool_AddRange(void * jarg1, void * jarg2) {
  std::vector< FramePool > *arg1 = (std::vector< FramePool > *) 0 ;
  std::vector< FramePool > *arg2 = 0 ;
  
  arg1 = (std::vector< FramePool > *)jarg1; 
  arg2 = (std::vector< FramePool > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< FramePool > const & is null", 0);
    return ;
  } 
  std_vector_Sl_FramePool_Sg__AddRange(arg1,(std::vector< FramePool > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorFramePool_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< FramePool > *arg1 = (std::vector< FramePool > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< FramePool > *result = 0 ;
  
  arg1 = (std::vector< FramePool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< FramePool > *)std_vector_Sl_FramePool_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFramePool_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< FramePool > *arg1 = (std::vector< FramePool > *) 0 ;
  int arg2 ;
  FramePool *arg3 = 0 ;
  
  arg1 = (std::vector< FramePool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (FramePool *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FramePool const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_FramePool_Sg__Insert(arg1,arg2,(FramePool const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFramePool_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< FramePool > *arg1 = (std::vector< FramePool > *) 0 ;
  int arg2 ;
  std::vector< FramePool > *arg3 = 0 ;
  
  arg1 = (std::vector< FramePool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< FramePool > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< FramePool > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_FramePool_Sg__InsertRange(arg1,arg2,(std::vector< FramePool > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFramePool_RemoveAt(void * jarg1, int jarg2) {
  std::vector< FramePool > *arg1 = (std::vector< FramePool > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< FramePool > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_FramePool_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFramePool_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< FramePool > *arg1 = (std::vector< FramePool > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< FramePool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_FramePool_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorFramePool_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  FramePool *arg1 = 0 ;
  int arg2 ;
  std::vector< FramePool > *result = 0 ;
  
  arg1 = (FramePool *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FramePool const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< FramePool > *)std_vector_Sl_FramePool_Sg__Repeat((FramePool const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFramePool_Reverse__SWIG_0(void * jarg1) {
  std::vector< FramePool > *arg1 = (std::vector< FramePool > *) 0 ;
  
  arg1 = (std::vector< FramePool > *)jarg1; 
  std_vector_Sl_FramePool_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFramePool_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< FramePool > *arg1 = (std::vector< FramePool > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< FramePool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_FramePool_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFramePool_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< FramePool > *arg1 = (std::vector< FramePool > *) 0 ;
  int arg2 ;
  std::vector< FramePool > *arg3 = 0 ;
  
  arg1 = (std::vector< FramePool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< FramePool > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< FramePool > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_FramePool_Sg__SetRange(arg1,arg2,(std::vector< FramePool > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorFramePool(void * jarg1) {
  std::vector< FramePool > *arg1 = (std::vector< FramePool > *) 0 ;
  
  arg1 = (std::vector< FramePool > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorFrame__SWIG_0() {
  void * jresult ;
  std::vector< Frame > *result = 0 ;
  
  result = (std::vector< Frame > *)new std::vector< Frame >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorFrame__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Frame > *arg1 = 0 ;
  std::vector< Frame > *result = 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Frame > const & is null", 0);
    return 0;
  } 
  result = (std::vector< Frame > *)new std::vector< Frame >((std::vector< Frame > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_Clear(void * jarg1) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_Add(void * jarg1, void * jarg2) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  Frame *arg2 = 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (Frame *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Frame const & is null", 0);
    return ;
  } 
  (arg1)->push_back((Frame const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorFrame_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  std::vector< Frame >::size_type result;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  result = ((std::vector< Frame > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorFrame_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  bool result;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  result = (bool)((std::vector< Frame > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorFrame_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  std::vector< Frame >::size_type result;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  result = ((std::vector< Frame > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  std::vector< Frame >::size_type arg2 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (std::vector< Frame >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorFrame__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Frame > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Frame > *)new_std_vector_Sl_Frame_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorFrame_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  int arg2 ;
  Frame result;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_Frame_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new Frame(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorFrame_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  int arg2 ;
  std::vector< Frame >::value_type *result = 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Frame >::value_type *) &std_vector_Sl_Frame_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  int arg2 ;
  Frame *arg3 = 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Frame *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Frame const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Frame_Sg__setitem(arg1,arg2,(Frame const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_AddRange(void * jarg1, void * jarg2) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  std::vector< Frame > *arg2 = 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (std::vector< Frame > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Frame > const & is null", 0);
    return ;
  } 
  std_vector_Sl_Frame_Sg__AddRange(arg1,(std::vector< Frame > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorFrame_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Frame > *result = 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Frame > *)std_vector_Sl_Frame_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  int arg2 ;
  Frame *arg3 = 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Frame *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Frame const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Frame_Sg__Insert(arg1,arg2,(Frame const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  int arg2 ;
  std::vector< Frame > *arg3 = 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Frame > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Frame > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Frame_Sg__InsertRange(arg1,arg2,(std::vector< Frame > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Frame_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Frame_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorFrame_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Frame *arg1 = 0 ;
  int arg2 ;
  std::vector< Frame > *result = 0 ;
  
  arg1 = (Frame *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Frame const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Frame > *)std_vector_Sl_Frame_Sg__Repeat((Frame const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_Reverse__SWIG_0(void * jarg1) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  std_vector_Sl_Frame_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Frame_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrame_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  int arg2 ;
  std::vector< Frame > *arg3 = 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Frame > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Frame > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Frame_Sg__SetRange(arg1,arg2,(std::vector< Frame > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorFrame(void * jarg1) {
  std::vector< Frame > *arg1 = (std::vector< Frame > *) 0 ;
  
  arg1 = (std::vector< Frame > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorFrameSpec__SWIG_0() {
  void * jresult ;
  std::vector< FrameSpec > *result = 0 ;
  
  result = (std::vector< FrameSpec > *)new std::vector< FrameSpec >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorFrameSpec__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< FrameSpec > *arg1 = 0 ;
  std::vector< FrameSpec > *result = 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< FrameSpec > const & is null", 0);
    return 0;
  } 
  result = (std::vector< FrameSpec > *)new std::vector< FrameSpec >((std::vector< FrameSpec > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_Clear(void * jarg1) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_Add(void * jarg1, void * jarg2) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  FrameSpec *arg2 = 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (FrameSpec *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FrameSpec const & is null", 0);
    return ;
  } 
  (arg1)->push_back((FrameSpec const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorFrameSpec_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  std::vector< FrameSpec >::size_type result;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  result = ((std::vector< FrameSpec > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorFrameSpec_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  bool result;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  result = (bool)((std::vector< FrameSpec > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorFrameSpec_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  std::vector< FrameSpec >::size_type result;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  result = ((std::vector< FrameSpec > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  std::vector< FrameSpec >::size_type arg2 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (std::vector< FrameSpec >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorFrameSpec__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< FrameSpec > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< FrameSpec > *)new_std_vector_Sl_FrameSpec_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorFrameSpec_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  int arg2 ;
  SwigValueWrapper< FrameSpec > result;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_FrameSpec_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new FrameSpec(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorFrameSpec_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  int arg2 ;
  std::vector< FrameSpec >::value_type *result = 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< FrameSpec >::value_type *) &std_vector_Sl_FrameSpec_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  int arg2 ;
  FrameSpec *arg3 = 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (FrameSpec *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FrameSpec const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_FrameSpec_Sg__setitem(arg1,arg2,(FrameSpec const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_AddRange(void * jarg1, void * jarg2) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  std::vector< FrameSpec > *arg2 = 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (std::vector< FrameSpec > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< FrameSpec > const & is null", 0);
    return ;
  } 
  std_vector_Sl_FrameSpec_Sg__AddRange(arg1,(std::vector< FrameSpec > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorFrameSpec_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< FrameSpec > *result = 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< FrameSpec > *)std_vector_Sl_FrameSpec_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  int arg2 ;
  FrameSpec *arg3 = 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (FrameSpec *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FrameSpec const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_FrameSpec_Sg__Insert(arg1,arg2,(FrameSpec const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  int arg2 ;
  std::vector< FrameSpec > *arg3 = 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< FrameSpec > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< FrameSpec > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_FrameSpec_Sg__InsertRange(arg1,arg2,(std::vector< FrameSpec > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_RemoveAt(void * jarg1, int jarg2) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_FrameSpec_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_FrameSpec_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorFrameSpec_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  FrameSpec *arg1 = 0 ;
  int arg2 ;
  std::vector< FrameSpec > *result = 0 ;
  
  arg1 = (FrameSpec *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FrameSpec const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< FrameSpec > *)std_vector_Sl_FrameSpec_Sg__Repeat((FrameSpec const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_Reverse__SWIG_0(void * jarg1) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  std_vector_Sl_FrameSpec_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_FrameSpec_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorFrameSpec_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  int arg2 ;
  std::vector< FrameSpec > *arg3 = 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< FrameSpec > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< FrameSpec > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_FrameSpec_Sg__SetRange(arg1,arg2,(std::vector< FrameSpec > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorFrameSpec(void * jarg1) {
  std::vector< FrameSpec > *arg1 = (std::vector< FrameSpec > *) 0 ;
  
  arg1 = (std::vector< FrameSpec > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorApriltagDetection__SWIG_0() {
  void * jresult ;
  std::vector< ApriltagDetection > *result = 0 ;
  
  result = (std::vector< ApriltagDetection > *)new std::vector< ApriltagDetection >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorApriltagDetection__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< ApriltagDetection > *arg1 = 0 ;
  std::vector< ApriltagDetection > *result = 0 ;
  
  arg1 = (std::vector< ApriltagDetection > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ApriltagDetection > const & is null", 0);
    return 0;
  } 
  result = (std::vector< ApriltagDetection > *)new std::vector< ApriltagDetection >((std::vector< ApriltagDetection > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagDetection_Clear(void * jarg1) {
  std::vector< ApriltagDetection > *arg1 = (std::vector< ApriltagDetection > *) 0 ;
  
  arg1 = (std::vector< ApriltagDetection > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagDetection_Add(void * jarg1, void * jarg2) {
  std::vector< ApriltagDetection > *arg1 = (std::vector< ApriltagDetection > *) 0 ;
  ApriltagDetection *arg2 = 0 ;
  
  arg1 = (std::vector< ApriltagDetection > *)jarg1; 
  arg2 = (ApriltagDetection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ApriltagDetection const & is null", 0);
    return ;
  } 
  (arg1)->push_back((ApriltagDetection const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorApriltagDetection_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< ApriltagDetection > *arg1 = (std::vector< ApriltagDetection > *) 0 ;
  std::vector< ApriltagDetection >::size_type result;
  
  arg1 = (std::vector< ApriltagDetection > *)jarg1; 
  result = ((std::vector< ApriltagDetection > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorApriltagDetection_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< ApriltagDetection > *arg1 = (std::vector< ApriltagDetection > *) 0 ;
  bool result;
  
  arg1 = (std::vector< ApriltagDetection > *)jarg1; 
  result = (bool)((std::vector< ApriltagDetection > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorApriltagDetection_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< ApriltagDetection > *arg1 = (std::vector< ApriltagDetection > *) 0 ;
  std::vector< ApriltagDetection >::size_type result;
  
  arg1 = (std::vector< ApriltagDetection > *)jarg1; 
  result = ((std::vector< ApriltagDetection > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagDetection_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< ApriltagDetection > *arg1 = (std::vector< ApriltagDetection > *) 0 ;
  std::vector< ApriltagDetection >::size_type arg2 ;
  
  arg1 = (std::vector< ApriltagDetection > *)jarg1; 
  arg2 = (std::vector< ApriltagDetection >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorApriltagDetection__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< ApriltagDetection > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< ApriltagDetection > *)new_std_vector_Sl_ApriltagDetection_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorApriltagDetection_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ApriltagDetection > *arg1 = (std::vector< ApriltagDetection > *) 0 ;
  int arg2 ;
  SwigValueWrapper< ApriltagDetection > result;
  
  arg1 = (std::vector< ApriltagDetection > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_ApriltagDetection_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new ApriltagDetection(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorApriltagDetection_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ApriltagDetection > *arg1 = (std::vector< ApriltagDetection > *) 0 ;
  int arg2 ;
  std::vector< ApriltagDetection >::value_type *result = 0 ;
  
  arg1 = (std::vector< ApriltagDetection > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ApriltagDetection >::value_type *) &std_vector_Sl_ApriltagDetection_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagDetection_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ApriltagDetection > *arg1 = (std::vector< ApriltagDetection > *) 0 ;
  int arg2 ;
  ApriltagDetection *arg3 = 0 ;
  
  arg1 = (std::vector< ApriltagDetection > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ApriltagDetection *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ApriltagDetection const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ApriltagDetection_Sg__setitem(arg1,arg2,(ApriltagDetection const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagDetection_AddRange(void * jarg1, void * jarg2) {
  std::vector< ApriltagDetection > *arg1 = (std::vector< ApriltagDetection > *) 0 ;
  std::vector< ApriltagDetection > *arg2 = 0 ;
  
  arg1 = (std::vector< ApriltagDetection > *)jarg1; 
  arg2 = (std::vector< ApriltagDetection > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ApriltagDetection > const & is null", 0);
    return ;
  } 
  std_vector_Sl_ApriltagDetection_Sg__AddRange(arg1,(std::vector< ApriltagDetection > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorApriltagDetection_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< ApriltagDetection > *arg1 = (std::vector< ApriltagDetection > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< ApriltagDetection > *result = 0 ;
  
  arg1 = (std::vector< ApriltagDetection > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< ApriltagDetection > *)std_vector_Sl_ApriltagDetection_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagDetection_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ApriltagDetection > *arg1 = (std::vector< ApriltagDetection > *) 0 ;
  int arg2 ;
  ApriltagDetection *arg3 = 0 ;
  
  arg1 = (std::vector< ApriltagDetection > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ApriltagDetection *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ApriltagDetection const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ApriltagDetection_Sg__Insert(arg1,arg2,(ApriltagDetection const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagDetection_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ApriltagDetection > *arg1 = (std::vector< ApriltagDetection > *) 0 ;
  int arg2 ;
  std::vector< ApriltagDetection > *arg3 = 0 ;
  
  arg1 = (std::vector< ApriltagDetection > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ApriltagDetection > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ApriltagDetection > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ApriltagDetection_Sg__InsertRange(arg1,arg2,(std::vector< ApriltagDetection > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagDetection_RemoveAt(void * jarg1, int jarg2) {
  std::vector< ApriltagDetection > *arg1 = (std::vector< ApriltagDetection > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< ApriltagDetection > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_ApriltagDetection_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagDetection_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< ApriltagDetection > *arg1 = (std::vector< ApriltagDetection > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ApriltagDetection > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ApriltagDetection_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorApriltagDetection_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  ApriltagDetection *arg1 = 0 ;
  int arg2 ;
  std::vector< ApriltagDetection > *result = 0 ;
  
  arg1 = (ApriltagDetection *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ApriltagDetection const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ApriltagDetection > *)std_vector_Sl_ApriltagDetection_Sg__Repeat((ApriltagDetection const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagDetection_Reverse__SWIG_0(void * jarg1) {
  std::vector< ApriltagDetection > *arg1 = (std::vector< ApriltagDetection > *) 0 ;
  
  arg1 = (std::vector< ApriltagDetection > *)jarg1; 
  std_vector_Sl_ApriltagDetection_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagDetection_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< ApriltagDetection > *arg1 = (std::vector< ApriltagDetection > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ApriltagDetection > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ApriltagDetection_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagDetection_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ApriltagDetection > *arg1 = (std::vector< ApriltagDetection > *) 0 ;
  int arg2 ;
  std::vector< ApriltagDetection > *arg3 = 0 ;
  
  arg1 = (std::vector< ApriltagDetection > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ApriltagDetection > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ApriltagDetection > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ApriltagDetection_Sg__SetRange(arg1,arg2,(std::vector< ApriltagDetection > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorApriltagDetection(void * jarg1) {
  std::vector< ApriltagDetection > *arg1 = (std::vector< ApriltagDetection > *) 0 ;
  
  arg1 = (std::vector< ApriltagDetection > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorApriltagSink__SWIG_0() {
  void * jresult ;
  std::vector< ApriltagSink > *result = 0 ;
  
  result = (std::vector< ApriltagSink > *)new std::vector< ApriltagSink >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorApriltagSink__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< ApriltagSink > *arg1 = 0 ;
  std::vector< ApriltagSink > *result = 0 ;
  
  arg1 = (std::vector< ApriltagSink > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ApriltagSink > const & is null", 0);
    return 0;
  } 
  result = (std::vector< ApriltagSink > *)new std::vector< ApriltagSink >((std::vector< ApriltagSink > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagSink_Clear(void * jarg1) {
  std::vector< ApriltagSink > *arg1 = (std::vector< ApriltagSink > *) 0 ;
  
  arg1 = (std::vector< ApriltagSink > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagSink_Add(void * jarg1, void * jarg2) {
  std::vector< ApriltagSink > *arg1 = (std::vector< ApriltagSink > *) 0 ;
  ApriltagSink *arg2 = 0 ;
  
  arg1 = (std::vector< ApriltagSink > *)jarg1; 
  arg2 = (ApriltagSink *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ApriltagSink const & is null", 0);
    return ;
  } 
  (arg1)->push_back((ApriltagSink const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorApriltagSink_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< ApriltagSink > *arg1 = (std::vector< ApriltagSink > *) 0 ;
  std::vector< ApriltagSink >::size_type result;
  
  arg1 = (std::vector< ApriltagSink > *)jarg1; 
  result = ((std::vector< ApriltagSink > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorApriltagSink_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< ApriltagSink > *arg1 = (std::vector< ApriltagSink > *) 0 ;
  bool result;
  
  arg1 = (std::vector< ApriltagSink > *)jarg1; 
  result = (bool)((std::vector< ApriltagSink > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorApriltagSink_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< ApriltagSink > *arg1 = (std::vector< ApriltagSink > *) 0 ;
  std::vector< ApriltagSink >::size_type result;
  
  arg1 = (std::vector< ApriltagSink > *)jarg1; 
  result = ((std::vector< ApriltagSink > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagSink_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< ApriltagSink > *arg1 = (std::vector< ApriltagSink > *) 0 ;
  std::vector< ApriltagSink >::size_type arg2 ;
  
  arg1 = (std::vector< ApriltagSink > *)jarg1; 
  arg2 = (std::vector< ApriltagSink >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorApriltagSink__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< ApriltagSink > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< ApriltagSink > *)new_std_vector_Sl_ApriltagSink_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorApriltagSink_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ApriltagSink > *arg1 = (std::vector< ApriltagSink > *) 0 ;
  int arg2 ;
  SwigValueWrapper< ApriltagSink > result;
  
  arg1 = (std::vector< ApriltagSink > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_ApriltagSink_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new ApriltagSink(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorApriltagSink_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ApriltagSink > *arg1 = (std::vector< ApriltagSink > *) 0 ;
  int arg2 ;
  std::vector< ApriltagSink >::value_type *result = 0 ;
  
  arg1 = (std::vector< ApriltagSink > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ApriltagSink >::value_type *) &std_vector_Sl_ApriltagSink_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagSink_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ApriltagSink > *arg1 = (std::vector< ApriltagSink > *) 0 ;
  int arg2 ;
  ApriltagSink *arg3 = 0 ;
  
  arg1 = (std::vector< ApriltagSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ApriltagSink *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ApriltagSink const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ApriltagSink_Sg__setitem(arg1,arg2,(ApriltagSink const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagSink_AddRange(void * jarg1, void * jarg2) {
  std::vector< ApriltagSink > *arg1 = (std::vector< ApriltagSink > *) 0 ;
  std::vector< ApriltagSink > *arg2 = 0 ;
  
  arg1 = (std::vector< ApriltagSink > *)jarg1; 
  arg2 = (std::vector< ApriltagSink > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ApriltagSink > const & is null", 0);
    return ;
  } 
  std_vector_Sl_ApriltagSink_Sg__AddRange(arg1,(std::vector< ApriltagSink > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorApriltagSink_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< ApriltagSink > *arg1 = (std::vector< ApriltagSink > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< ApriltagSink > *result = 0 ;
  
  arg1 = (std::vector< ApriltagSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< ApriltagSink > *)std_vector_Sl_ApriltagSink_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagSink_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ApriltagSink > *arg1 = (std::vector< ApriltagSink > *) 0 ;
  int arg2 ;
  ApriltagSink *arg3 = 0 ;
  
  arg1 = (std::vector< ApriltagSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ApriltagSink *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ApriltagSink const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ApriltagSink_Sg__Insert(arg1,arg2,(ApriltagSink const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagSink_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ApriltagSink > *arg1 = (std::vector< ApriltagSink > *) 0 ;
  int arg2 ;
  std::vector< ApriltagSink > *arg3 = 0 ;
  
  arg1 = (std::vector< ApriltagSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ApriltagSink > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ApriltagSink > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ApriltagSink_Sg__InsertRange(arg1,arg2,(std::vector< ApriltagSink > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagSink_RemoveAt(void * jarg1, int jarg2) {
  std::vector< ApriltagSink > *arg1 = (std::vector< ApriltagSink > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< ApriltagSink > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_ApriltagSink_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagSink_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< ApriltagSink > *arg1 = (std::vector< ApriltagSink > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ApriltagSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ApriltagSink_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorApriltagSink_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  ApriltagSink *arg1 = 0 ;
  int arg2 ;
  std::vector< ApriltagSink > *result = 0 ;
  
  arg1 = (ApriltagSink *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ApriltagSink const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ApriltagSink > *)std_vector_Sl_ApriltagSink_Sg__Repeat((ApriltagSink const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagSink_Reverse__SWIG_0(void * jarg1) {
  std::vector< ApriltagSink > *arg1 = (std::vector< ApriltagSink > *) 0 ;
  
  arg1 = (std::vector< ApriltagSink > *)jarg1; 
  std_vector_Sl_ApriltagSink_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagSink_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< ApriltagSink > *arg1 = (std::vector< ApriltagSink > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ApriltagSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ApriltagSink_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorApriltagSink_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ApriltagSink > *arg1 = (std::vector< ApriltagSink > *) 0 ;
  int arg2 ;
  std::vector< ApriltagSink > *arg3 = 0 ;
  
  arg1 = (std::vector< ApriltagSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ApriltagSink > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ApriltagSink > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ApriltagSink_Sg__SetRange(arg1,arg2,(std::vector< ApriltagSink > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorApriltagSink(void * jarg1) {
  std::vector< ApriltagSink > *arg1 = (std::vector< ApriltagSink > *) 0 ;
  
  arg1 = (std::vector< ApriltagSink > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorISink__SWIG_0() {
  void * jresult ;
  std::vector< ISink > *result = 0 ;
  
  result = (std::vector< ISink > *)new std::vector< ISink >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorISink__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< ISink > *arg1 = 0 ;
  std::vector< ISink > *result = 0 ;
  
  arg1 = (std::vector< ISink > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ISink > const & is null", 0);
    return 0;
  } 
  result = (std::vector< ISink > *)new std::vector< ISink >((std::vector< ISink > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorISink_Clear(void * jarg1) {
  std::vector< ISink > *arg1 = (std::vector< ISink > *) 0 ;
  
  arg1 = (std::vector< ISink > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorISink_Add(void * jarg1, void * jarg2) {
  std::vector< ISink > *arg1 = (std::vector< ISink > *) 0 ;
  ISink *arg2 = 0 ;
  
  arg1 = (std::vector< ISink > *)jarg1; 
  arg2 = (ISink *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ISink const & is null", 0);
    return ;
  } 
  (arg1)->push_back((ISink const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorISink_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< ISink > *arg1 = (std::vector< ISink > *) 0 ;
  std::vector< ISink >::size_type result;
  
  arg1 = (std::vector< ISink > *)jarg1; 
  result = ((std::vector< ISink > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorISink_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< ISink > *arg1 = (std::vector< ISink > *) 0 ;
  bool result;
  
  arg1 = (std::vector< ISink > *)jarg1; 
  result = (bool)((std::vector< ISink > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorISink_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< ISink > *arg1 = (std::vector< ISink > *) 0 ;
  std::vector< ISink >::size_type result;
  
  arg1 = (std::vector< ISink > *)jarg1; 
  result = ((std::vector< ISink > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorISink_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< ISink > *arg1 = (std::vector< ISink > *) 0 ;
  std::vector< ISink >::size_type arg2 ;
  
  arg1 = (std::vector< ISink > *)jarg1; 
  arg2 = (std::vector< ISink >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorISink__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< ISink > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< ISink > *)new_std_vector_Sl_ISink_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorISink_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ISink > *arg1 = (std::vector< ISink > *) 0 ;
  int arg2 ;
  ISink result;
  
  arg1 = (std::vector< ISink > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_ISink_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new ISink(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorISink_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ISink > *arg1 = (std::vector< ISink > *) 0 ;
  int arg2 ;
  std::vector< ISink >::value_type *result = 0 ;
  
  arg1 = (std::vector< ISink > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ISink >::value_type *) &std_vector_Sl_ISink_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorISink_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ISink > *arg1 = (std::vector< ISink > *) 0 ;
  int arg2 ;
  ISink *arg3 = 0 ;
  
  arg1 = (std::vector< ISink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ISink *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ISink const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ISink_Sg__setitem(arg1,arg2,(ISink const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorISink_AddRange(void * jarg1, void * jarg2) {
  std::vector< ISink > *arg1 = (std::vector< ISink > *) 0 ;
  std::vector< ISink > *arg2 = 0 ;
  
  arg1 = (std::vector< ISink > *)jarg1; 
  arg2 = (std::vector< ISink > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ISink > const & is null", 0);
    return ;
  } 
  std_vector_Sl_ISink_Sg__AddRange(arg1,(std::vector< ISink > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorISink_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< ISink > *arg1 = (std::vector< ISink > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< ISink > *result = 0 ;
  
  arg1 = (std::vector< ISink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< ISink > *)std_vector_Sl_ISink_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorISink_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ISink > *arg1 = (std::vector< ISink > *) 0 ;
  int arg2 ;
  ISink *arg3 = 0 ;
  
  arg1 = (std::vector< ISink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ISink *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ISink const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ISink_Sg__Insert(arg1,arg2,(ISink const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorISink_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ISink > *arg1 = (std::vector< ISink > *) 0 ;
  int arg2 ;
  std::vector< ISink > *arg3 = 0 ;
  
  arg1 = (std::vector< ISink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ISink > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ISink > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ISink_Sg__InsertRange(arg1,arg2,(std::vector< ISink > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorISink_RemoveAt(void * jarg1, int jarg2) {
  std::vector< ISink > *arg1 = (std::vector< ISink > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< ISink > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_ISink_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorISink_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< ISink > *arg1 = (std::vector< ISink > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ISink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ISink_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorISink_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  ISink *arg1 = 0 ;
  int arg2 ;
  std::vector< ISink > *result = 0 ;
  
  arg1 = (ISink *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ISink const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ISink > *)std_vector_Sl_ISink_Sg__Repeat((ISink const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorISink_Reverse__SWIG_0(void * jarg1) {
  std::vector< ISink > *arg1 = (std::vector< ISink > *) 0 ;
  
  arg1 = (std::vector< ISink > *)jarg1; 
  std_vector_Sl_ISink_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorISink_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< ISink > *arg1 = (std::vector< ISink > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ISink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ISink_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorISink_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ISink > *arg1 = (std::vector< ISink > *) 0 ;
  int arg2 ;
  std::vector< ISink > *arg3 = 0 ;
  
  arg1 = (std::vector< ISink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ISink > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ISink > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ISink_Sg__SetRange(arg1,arg2,(std::vector< ISink > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorISink(void * jarg1) {
  std::vector< ISink > *arg1 = (std::vector< ISink > *) 0 ;
  
  arg1 = (std::vector< ISink > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorIObjectDetectionSink__SWIG_0() {
  void * jresult ;
  std::vector< IObjectDetectionSink > *result = 0 ;
  
  result = (std::vector< IObjectDetectionSink > *)new std::vector< IObjectDetectionSink >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorIObjectDetectionSink__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< IObjectDetectionSink > *arg1 = 0 ;
  std::vector< IObjectDetectionSink > *result = 0 ;
  
  arg1 = (std::vector< IObjectDetectionSink > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< IObjectDetectionSink > const & is null", 0);
    return 0;
  } 
  result = (std::vector< IObjectDetectionSink > *)new std::vector< IObjectDetectionSink >((std::vector< IObjectDetectionSink > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIObjectDetectionSink_Clear(void * jarg1) {
  std::vector< IObjectDetectionSink > *arg1 = (std::vector< IObjectDetectionSink > *) 0 ;
  
  arg1 = (std::vector< IObjectDetectionSink > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIObjectDetectionSink_Add(void * jarg1, void * jarg2) {
  std::vector< IObjectDetectionSink > *arg1 = (std::vector< IObjectDetectionSink > *) 0 ;
  IObjectDetectionSink *arg2 = 0 ;
  
  arg1 = (std::vector< IObjectDetectionSink > *)jarg1; 
  arg2 = (IObjectDetectionSink *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IObjectDetectionSink const & is null", 0);
    return ;
  } 
  (arg1)->push_back((IObjectDetectionSink const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorIObjectDetectionSink_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< IObjectDetectionSink > *arg1 = (std::vector< IObjectDetectionSink > *) 0 ;
  std::vector< IObjectDetectionSink >::size_type result;
  
  arg1 = (std::vector< IObjectDetectionSink > *)jarg1; 
  result = ((std::vector< IObjectDetectionSink > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorIObjectDetectionSink_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< IObjectDetectionSink > *arg1 = (std::vector< IObjectDetectionSink > *) 0 ;
  bool result;
  
  arg1 = (std::vector< IObjectDetectionSink > *)jarg1; 
  result = (bool)((std::vector< IObjectDetectionSink > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorIObjectDetectionSink_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< IObjectDetectionSink > *arg1 = (std::vector< IObjectDetectionSink > *) 0 ;
  std::vector< IObjectDetectionSink >::size_type result;
  
  arg1 = (std::vector< IObjectDetectionSink > *)jarg1; 
  result = ((std::vector< IObjectDetectionSink > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIObjectDetectionSink_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< IObjectDetectionSink > *arg1 = (std::vector< IObjectDetectionSink > *) 0 ;
  std::vector< IObjectDetectionSink >::size_type arg2 ;
  
  arg1 = (std::vector< IObjectDetectionSink > *)jarg1; 
  arg2 = (std::vector< IObjectDetectionSink >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorIObjectDetectionSink__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< IObjectDetectionSink > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< IObjectDetectionSink > *)new_std_vector_Sl_IObjectDetectionSink_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorIObjectDetectionSink_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< IObjectDetectionSink > *arg1 = (std::vector< IObjectDetectionSink > *) 0 ;
  int arg2 ;
  IObjectDetectionSink result;
  
  arg1 = (std::vector< IObjectDetectionSink > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_IObjectDetectionSink_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new IObjectDetectionSink(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorIObjectDetectionSink_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< IObjectDetectionSink > *arg1 = (std::vector< IObjectDetectionSink > *) 0 ;
  int arg2 ;
  std::vector< IObjectDetectionSink >::value_type *result = 0 ;
  
  arg1 = (std::vector< IObjectDetectionSink > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< IObjectDetectionSink >::value_type *) &std_vector_Sl_IObjectDetectionSink_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIObjectDetectionSink_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< IObjectDetectionSink > *arg1 = (std::vector< IObjectDetectionSink > *) 0 ;
  int arg2 ;
  IObjectDetectionSink *arg3 = 0 ;
  
  arg1 = (std::vector< IObjectDetectionSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (IObjectDetectionSink *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IObjectDetectionSink const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_IObjectDetectionSink_Sg__setitem(arg1,arg2,(IObjectDetectionSink const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIObjectDetectionSink_AddRange(void * jarg1, void * jarg2) {
  std::vector< IObjectDetectionSink > *arg1 = (std::vector< IObjectDetectionSink > *) 0 ;
  std::vector< IObjectDetectionSink > *arg2 = 0 ;
  
  arg1 = (std::vector< IObjectDetectionSink > *)jarg1; 
  arg2 = (std::vector< IObjectDetectionSink > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< IObjectDetectionSink > const & is null", 0);
    return ;
  } 
  std_vector_Sl_IObjectDetectionSink_Sg__AddRange(arg1,(std::vector< IObjectDetectionSink > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorIObjectDetectionSink_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< IObjectDetectionSink > *arg1 = (std::vector< IObjectDetectionSink > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< IObjectDetectionSink > *result = 0 ;
  
  arg1 = (std::vector< IObjectDetectionSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< IObjectDetectionSink > *)std_vector_Sl_IObjectDetectionSink_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIObjectDetectionSink_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< IObjectDetectionSink > *arg1 = (std::vector< IObjectDetectionSink > *) 0 ;
  int arg2 ;
  IObjectDetectionSink *arg3 = 0 ;
  
  arg1 = (std::vector< IObjectDetectionSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (IObjectDetectionSink *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IObjectDetectionSink const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_IObjectDetectionSink_Sg__Insert(arg1,arg2,(IObjectDetectionSink const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIObjectDetectionSink_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< IObjectDetectionSink > *arg1 = (std::vector< IObjectDetectionSink > *) 0 ;
  int arg2 ;
  std::vector< IObjectDetectionSink > *arg3 = 0 ;
  
  arg1 = (std::vector< IObjectDetectionSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< IObjectDetectionSink > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< IObjectDetectionSink > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_IObjectDetectionSink_Sg__InsertRange(arg1,arg2,(std::vector< IObjectDetectionSink > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIObjectDetectionSink_RemoveAt(void * jarg1, int jarg2) {
  std::vector< IObjectDetectionSink > *arg1 = (std::vector< IObjectDetectionSink > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< IObjectDetectionSink > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_IObjectDetectionSink_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIObjectDetectionSink_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< IObjectDetectionSink > *arg1 = (std::vector< IObjectDetectionSink > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< IObjectDetectionSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_IObjectDetectionSink_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorIObjectDetectionSink_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  IObjectDetectionSink *arg1 = 0 ;
  int arg2 ;
  std::vector< IObjectDetectionSink > *result = 0 ;
  
  arg1 = (IObjectDetectionSink *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IObjectDetectionSink const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< IObjectDetectionSink > *)std_vector_Sl_IObjectDetectionSink_Sg__Repeat((IObjectDetectionSink const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIObjectDetectionSink_Reverse__SWIG_0(void * jarg1) {
  std::vector< IObjectDetectionSink > *arg1 = (std::vector< IObjectDetectionSink > *) 0 ;
  
  arg1 = (std::vector< IObjectDetectionSink > *)jarg1; 
  std_vector_Sl_IObjectDetectionSink_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIObjectDetectionSink_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< IObjectDetectionSink > *arg1 = (std::vector< IObjectDetectionSink > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< IObjectDetectionSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_IObjectDetectionSink_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIObjectDetectionSink_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< IObjectDetectionSink > *arg1 = (std::vector< IObjectDetectionSink > *) 0 ;
  int arg2 ;
  std::vector< IObjectDetectionSink > *arg3 = 0 ;
  
  arg1 = (std::vector< IObjectDetectionSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< IObjectDetectionSink > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< IObjectDetectionSink > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_IObjectDetectionSink_Sg__SetRange(arg1,arg2,(std::vector< IObjectDetectionSink > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorIObjectDetectionSink(void * jarg1) {
  std::vector< IObjectDetectionSink > *arg1 = (std::vector< IObjectDetectionSink > *) 0 ;
  
  arg1 = (std::vector< IObjectDetectionSink > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorRknnSink__SWIG_0() {
  void * jresult ;
  std::vector< RknnSink > *result = 0 ;
  
  result = (std::vector< RknnSink > *)new std::vector< RknnSink >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorRknnSink__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< RknnSink > *arg1 = 0 ;
  std::vector< RknnSink > *result = 0 ;
  
  arg1 = (std::vector< RknnSink > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< RknnSink > const & is null", 0);
    return 0;
  } 
  result = (std::vector< RknnSink > *)new std::vector< RknnSink >((std::vector< RknnSink > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorRknnSink_Clear(void * jarg1) {
  std::vector< RknnSink > *arg1 = (std::vector< RknnSink > *) 0 ;
  
  arg1 = (std::vector< RknnSink > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorRknnSink_Add(void * jarg1, void * jarg2) {
  std::vector< RknnSink > *arg1 = (std::vector< RknnSink > *) 0 ;
  RknnSink *arg2 = 0 ;
  
  arg1 = (std::vector< RknnSink > *)jarg1; 
  arg2 = (RknnSink *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RknnSink const & is null", 0);
    return ;
  } 
  (arg1)->push_back((RknnSink const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorRknnSink_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< RknnSink > *arg1 = (std::vector< RknnSink > *) 0 ;
  std::vector< RknnSink >::size_type result;
  
  arg1 = (std::vector< RknnSink > *)jarg1; 
  result = ((std::vector< RknnSink > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorRknnSink_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< RknnSink > *arg1 = (std::vector< RknnSink > *) 0 ;
  bool result;
  
  arg1 = (std::vector< RknnSink > *)jarg1; 
  result = (bool)((std::vector< RknnSink > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorRknnSink_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< RknnSink > *arg1 = (std::vector< RknnSink > *) 0 ;
  std::vector< RknnSink >::size_type result;
  
  arg1 = (std::vector< RknnSink > *)jarg1; 
  result = ((std::vector< RknnSink > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorRknnSink_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< RknnSink > *arg1 = (std::vector< RknnSink > *) 0 ;
  std::vector< RknnSink >::size_type arg2 ;
  
  arg1 = (std::vector< RknnSink > *)jarg1; 
  arg2 = (std::vector< RknnSink >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorRknnSink__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< RknnSink > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< RknnSink > *)new_std_vector_Sl_RknnSink_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorRknnSink_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< RknnSink > *arg1 = (std::vector< RknnSink > *) 0 ;
  int arg2 ;
  RknnSink result;
  
  arg1 = (std::vector< RknnSink > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_RknnSink_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new RknnSink(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorRknnSink_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< RknnSink > *arg1 = (std::vector< RknnSink > *) 0 ;
  int arg2 ;
  std::vector< RknnSink >::value_type *result = 0 ;
  
  arg1 = (std::vector< RknnSink > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< RknnSink >::value_type *) &std_vector_Sl_RknnSink_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorRknnSink_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< RknnSink > *arg1 = (std::vector< RknnSink > *) 0 ;
  int arg2 ;
  RknnSink *arg3 = 0 ;
  
  arg1 = (std::vector< RknnSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (RknnSink *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RknnSink const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_RknnSink_Sg__setitem(arg1,arg2,(RknnSink const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorRknnSink_AddRange(void * jarg1, void * jarg2) {
  std::vector< RknnSink > *arg1 = (std::vector< RknnSink > *) 0 ;
  std::vector< RknnSink > *arg2 = 0 ;
  
  arg1 = (std::vector< RknnSink > *)jarg1; 
  arg2 = (std::vector< RknnSink > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< RknnSink > const & is null", 0);
    return ;
  } 
  std_vector_Sl_RknnSink_Sg__AddRange(arg1,(std::vector< RknnSink > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorRknnSink_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< RknnSink > *arg1 = (std::vector< RknnSink > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< RknnSink > *result = 0 ;
  
  arg1 = (std::vector< RknnSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< RknnSink > *)std_vector_Sl_RknnSink_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorRknnSink_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< RknnSink > *arg1 = (std::vector< RknnSink > *) 0 ;
  int arg2 ;
  RknnSink *arg3 = 0 ;
  
  arg1 = (std::vector< RknnSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (RknnSink *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RknnSink const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_RknnSink_Sg__Insert(arg1,arg2,(RknnSink const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorRknnSink_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< RknnSink > *arg1 = (std::vector< RknnSink > *) 0 ;
  int arg2 ;
  std::vector< RknnSink > *arg3 = 0 ;
  
  arg1 = (std::vector< RknnSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< RknnSink > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< RknnSink > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_RknnSink_Sg__InsertRange(arg1,arg2,(std::vector< RknnSink > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorRknnSink_RemoveAt(void * jarg1, int jarg2) {
  std::vector< RknnSink > *arg1 = (std::vector< RknnSink > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< RknnSink > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_RknnSink_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorRknnSink_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< RknnSink > *arg1 = (std::vector< RknnSink > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< RknnSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_RknnSink_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorRknnSink_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  RknnSink *arg1 = 0 ;
  int arg2 ;
  std::vector< RknnSink > *result = 0 ;
  
  arg1 = (RknnSink *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RknnSink const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< RknnSink > *)std_vector_Sl_RknnSink_Sg__Repeat((RknnSink const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorRknnSink_Reverse__SWIG_0(void * jarg1) {
  std::vector< RknnSink > *arg1 = (std::vector< RknnSink > *) 0 ;
  
  arg1 = (std::vector< RknnSink > *)jarg1; 
  std_vector_Sl_RknnSink_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorRknnSink_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< RknnSink > *arg1 = (std::vector< RknnSink > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< RknnSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_RknnSink_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorRknnSink_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< RknnSink > *arg1 = (std::vector< RknnSink > *) 0 ;
  int arg2 ;
  std::vector< RknnSink > *arg3 = 0 ;
  
  arg1 = (std::vector< RknnSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< RknnSink > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< RknnSink > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_RknnSink_Sg__SetRange(arg1,arg2,(std::vector< RknnSink > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorRknnSink(void * jarg1) {
  std::vector< RknnSink > *arg1 = (std::vector< RknnSink > *) 0 ;
  
  arg1 = (std::vector< RknnSink > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorTRTSink__SWIG_0() {
  void * jresult ;
  std::vector< TRTSink > *result = 0 ;
  
  result = (std::vector< TRTSink > *)new std::vector< TRTSink >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorTRTSink__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< TRTSink > *arg1 = 0 ;
  std::vector< TRTSink > *result = 0 ;
  
  arg1 = (std::vector< TRTSink > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TRTSink > const & is null", 0);
    return 0;
  } 
  result = (std::vector< TRTSink > *)new std::vector< TRTSink >((std::vector< TRTSink > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorTRTSink_Clear(void * jarg1) {
  std::vector< TRTSink > *arg1 = (std::vector< TRTSink > *) 0 ;
  
  arg1 = (std::vector< TRTSink > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorTRTSink_Add(void * jarg1, void * jarg2) {
  std::vector< TRTSink > *arg1 = (std::vector< TRTSink > *) 0 ;
  TRTSink *arg2 = 0 ;
  
  arg1 = (std::vector< TRTSink > *)jarg1; 
  arg2 = (TRTSink *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TRTSink const & is null", 0);
    return ;
  } 
  (arg1)->push_back((TRTSink const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorTRTSink_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< TRTSink > *arg1 = (std::vector< TRTSink > *) 0 ;
  std::vector< TRTSink >::size_type result;
  
  arg1 = (std::vector< TRTSink > *)jarg1; 
  result = ((std::vector< TRTSink > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorTRTSink_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< TRTSink > *arg1 = (std::vector< TRTSink > *) 0 ;
  bool result;
  
  arg1 = (std::vector< TRTSink > *)jarg1; 
  result = (bool)((std::vector< TRTSink > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorTRTSink_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< TRTSink > *arg1 = (std::vector< TRTSink > *) 0 ;
  std::vector< TRTSink >::size_type result;
  
  arg1 = (std::vector< TRTSink > *)jarg1; 
  result = ((std::vector< TRTSink > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorTRTSink_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< TRTSink > *arg1 = (std::vector< TRTSink > *) 0 ;
  std::vector< TRTSink >::size_type arg2 ;
  
  arg1 = (std::vector< TRTSink > *)jarg1; 
  arg2 = (std::vector< TRTSink >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorTRTSink__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< TRTSink > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< TRTSink > *)new_std_vector_Sl_TRTSink_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorTRTSink_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< TRTSink > *arg1 = (std::vector< TRTSink > *) 0 ;
  int arg2 ;
  TRTSink result;
  
  arg1 = (std::vector< TRTSink > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_TRTSink_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new TRTSink(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorTRTSink_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< TRTSink > *arg1 = (std::vector< TRTSink > *) 0 ;
  int arg2 ;
  std::vector< TRTSink >::value_type *result = 0 ;
  
  arg1 = (std::vector< TRTSink > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< TRTSink >::value_type *) &std_vector_Sl_TRTSink_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorTRTSink_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< TRTSink > *arg1 = (std::vector< TRTSink > *) 0 ;
  int arg2 ;
  TRTSink *arg3 = 0 ;
  
  arg1 = (std::vector< TRTSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (TRTSink *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TRTSink const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_TRTSink_Sg__setitem(arg1,arg2,(TRTSink const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorTRTSink_AddRange(void * jarg1, void * jarg2) {
  std::vector< TRTSink > *arg1 = (std::vector< TRTSink > *) 0 ;
  std::vector< TRTSink > *arg2 = 0 ;
  
  arg1 = (std::vector< TRTSink > *)jarg1; 
  arg2 = (std::vector< TRTSink > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TRTSink > const & is null", 0);
    return ;
  } 
  std_vector_Sl_TRTSink_Sg__AddRange(arg1,(std::vector< TRTSink > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorTRTSink_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< TRTSink > *arg1 = (std::vector< TRTSink > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< TRTSink > *result = 0 ;
  
  arg1 = (std::vector< TRTSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< TRTSink > *)std_vector_Sl_TRTSink_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorTRTSink_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< TRTSink > *arg1 = (std::vector< TRTSink > *) 0 ;
  int arg2 ;
  TRTSink *arg3 = 0 ;
  
  arg1 = (std::vector< TRTSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (TRTSink *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TRTSink const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_TRTSink_Sg__Insert(arg1,arg2,(TRTSink const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorTRTSink_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< TRTSink > *arg1 = (std::vector< TRTSink > *) 0 ;
  int arg2 ;
  std::vector< TRTSink > *arg3 = 0 ;
  
  arg1 = (std::vector< TRTSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< TRTSink > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TRTSink > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_TRTSink_Sg__InsertRange(arg1,arg2,(std::vector< TRTSink > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorTRTSink_RemoveAt(void * jarg1, int jarg2) {
  std::vector< TRTSink > *arg1 = (std::vector< TRTSink > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< TRTSink > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_TRTSink_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorTRTSink_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< TRTSink > *arg1 = (std::vector< TRTSink > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< TRTSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_TRTSink_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorTRTSink_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  TRTSink *arg1 = 0 ;
  int arg2 ;
  std::vector< TRTSink > *result = 0 ;
  
  arg1 = (TRTSink *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TRTSink const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< TRTSink > *)std_vector_Sl_TRTSink_Sg__Repeat((TRTSink const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorTRTSink_Reverse__SWIG_0(void * jarg1) {
  std::vector< TRTSink > *arg1 = (std::vector< TRTSink > *) 0 ;
  
  arg1 = (std::vector< TRTSink > *)jarg1; 
  std_vector_Sl_TRTSink_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorTRTSink_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< TRTSink > *arg1 = (std::vector< TRTSink > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< TRTSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_TRTSink_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorTRTSink_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< TRTSink > *arg1 = (std::vector< TRTSink > *) 0 ;
  int arg2 ;
  std::vector< TRTSink > *arg3 = 0 ;
  
  arg1 = (std::vector< TRTSink > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< TRTSink > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< TRTSink > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_TRTSink_Sg__SetRange(arg1,arg2,(std::vector< TRTSink > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorTRTSink(void * jarg1) {
  std::vector< TRTSink > *arg1 = (std::vector< TRTSink > *) 0 ;
  
  arg1 = (std::vector< TRTSink > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorPreProcessor__SWIG_0() {
  void * jresult ;
  std::vector< PreProcessor > *result = 0 ;
  
  result = (std::vector< PreProcessor > *)new std::vector< PreProcessor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorPreProcessor__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< PreProcessor > *arg1 = 0 ;
  std::vector< PreProcessor > *result = 0 ;
  
  arg1 = (std::vector< PreProcessor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< PreProcessor > const & is null", 0);
    return 0;
  } 
  result = (std::vector< PreProcessor > *)new std::vector< PreProcessor >((std::vector< PreProcessor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPreProcessor_Clear(void * jarg1) {
  std::vector< PreProcessor > *arg1 = (std::vector< PreProcessor > *) 0 ;
  
  arg1 = (std::vector< PreProcessor > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPreProcessor_Add(void * jarg1, void * jarg2) {
  std::vector< PreProcessor > *arg1 = (std::vector< PreProcessor > *) 0 ;
  PreProcessor *arg2 = 0 ;
  
  arg1 = (std::vector< PreProcessor > *)jarg1; 
  arg2 = (PreProcessor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PreProcessor const & is null", 0);
    return ;
  } 
  (arg1)->push_back((PreProcessor const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorPreProcessor_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< PreProcessor > *arg1 = (std::vector< PreProcessor > *) 0 ;
  std::vector< PreProcessor >::size_type result;
  
  arg1 = (std::vector< PreProcessor > *)jarg1; 
  result = ((std::vector< PreProcessor > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorPreProcessor_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< PreProcessor > *arg1 = (std::vector< PreProcessor > *) 0 ;
  bool result;
  
  arg1 = (std::vector< PreProcessor > *)jarg1; 
  result = (bool)((std::vector< PreProcessor > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorPreProcessor_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< PreProcessor > *arg1 = (std::vector< PreProcessor > *) 0 ;
  std::vector< PreProcessor >::size_type result;
  
  arg1 = (std::vector< PreProcessor > *)jarg1; 
  result = ((std::vector< PreProcessor > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPreProcessor_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< PreProcessor > *arg1 = (std::vector< PreProcessor > *) 0 ;
  std::vector< PreProcessor >::size_type arg2 ;
  
  arg1 = (std::vector< PreProcessor > *)jarg1; 
  arg2 = (std::vector< PreProcessor >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorPreProcessor__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< PreProcessor > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< PreProcessor > *)new_std_vector_Sl_PreProcessor_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorPreProcessor_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< PreProcessor > *arg1 = (std::vector< PreProcessor > *) 0 ;
  int arg2 ;
  SwigValueWrapper< PreProcessor > result;
  
  arg1 = (std::vector< PreProcessor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_PreProcessor_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new PreProcessor(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorPreProcessor_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< PreProcessor > *arg1 = (std::vector< PreProcessor > *) 0 ;
  int arg2 ;
  std::vector< PreProcessor >::value_type *result = 0 ;
  
  arg1 = (std::vector< PreProcessor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< PreProcessor >::value_type *) &std_vector_Sl_PreProcessor_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPreProcessor_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< PreProcessor > *arg1 = (std::vector< PreProcessor > *) 0 ;
  int arg2 ;
  PreProcessor *arg3 = 0 ;
  
  arg1 = (std::vector< PreProcessor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (PreProcessor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PreProcessor const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_PreProcessor_Sg__setitem(arg1,arg2,(PreProcessor const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPreProcessor_AddRange(void * jarg1, void * jarg2) {
  std::vector< PreProcessor > *arg1 = (std::vector< PreProcessor > *) 0 ;
  std::vector< PreProcessor > *arg2 = 0 ;
  
  arg1 = (std::vector< PreProcessor > *)jarg1; 
  arg2 = (std::vector< PreProcessor > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< PreProcessor > const & is null", 0);
    return ;
  } 
  std_vector_Sl_PreProcessor_Sg__AddRange(arg1,(std::vector< PreProcessor > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorPreProcessor_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< PreProcessor > *arg1 = (std::vector< PreProcessor > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< PreProcessor > *result = 0 ;
  
  arg1 = (std::vector< PreProcessor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< PreProcessor > *)std_vector_Sl_PreProcessor_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPreProcessor_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< PreProcessor > *arg1 = (std::vector< PreProcessor > *) 0 ;
  int arg2 ;
  PreProcessor *arg3 = 0 ;
  
  arg1 = (std::vector< PreProcessor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (PreProcessor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PreProcessor const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_PreProcessor_Sg__Insert(arg1,arg2,(PreProcessor const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPreProcessor_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< PreProcessor > *arg1 = (std::vector< PreProcessor > *) 0 ;
  int arg2 ;
  std::vector< PreProcessor > *arg3 = 0 ;
  
  arg1 = (std::vector< PreProcessor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< PreProcessor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< PreProcessor > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_PreProcessor_Sg__InsertRange(arg1,arg2,(std::vector< PreProcessor > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPreProcessor_RemoveAt(void * jarg1, int jarg2) {
  std::vector< PreProcessor > *arg1 = (std::vector< PreProcessor > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< PreProcessor > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_PreProcessor_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPreProcessor_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< PreProcessor > *arg1 = (std::vector< PreProcessor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< PreProcessor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_PreProcessor_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorPreProcessor_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  PreProcessor *arg1 = 0 ;
  int arg2 ;
  std::vector< PreProcessor > *result = 0 ;
  
  arg1 = (PreProcessor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PreProcessor const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< PreProcessor > *)std_vector_Sl_PreProcessor_Sg__Repeat((PreProcessor const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPreProcessor_Reverse__SWIG_0(void * jarg1) {
  std::vector< PreProcessor > *arg1 = (std::vector< PreProcessor > *) 0 ;
  
  arg1 = (std::vector< PreProcessor > *)jarg1; 
  std_vector_Sl_PreProcessor_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPreProcessor_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< PreProcessor > *arg1 = (std::vector< PreProcessor > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< PreProcessor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_PreProcessor_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorPreProcessor_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< PreProcessor > *arg1 = (std::vector< PreProcessor > *) 0 ;
  int arg2 ;
  std::vector< PreProcessor > *arg3 = 0 ;
  
  arg1 = (std::vector< PreProcessor > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< PreProcessor > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< PreProcessor > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_PreProcessor_Sg__SetRange(arg1,arg2,(std::vector< PreProcessor > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorPreProcessor(void * jarg1) {
  std::vector< PreProcessor > *arg1 = (std::vector< PreProcessor > *) 0 ;
  
  arg1 = (std::vector< PreProcessor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorSingleSourcePipeline__SWIG_0() {
  void * jresult ;
  std::vector< SingleSourcePipeline > *result = 0 ;
  
  result = (std::vector< SingleSourcePipeline > *)new std::vector< SingleSourcePipeline >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorSingleSourcePipeline__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< SingleSourcePipeline > *arg1 = 0 ;
  std::vector< SingleSourcePipeline > *result = 0 ;
  
  arg1 = (std::vector< SingleSourcePipeline > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SingleSourcePipeline > const & is null", 0);
    return 0;
  } 
  result = (std::vector< SingleSourcePipeline > *)new std::vector< SingleSourcePipeline >((std::vector< SingleSourcePipeline > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSingleSourcePipeline_Clear(void * jarg1) {
  std::vector< SingleSourcePipeline > *arg1 = (std::vector< SingleSourcePipeline > *) 0 ;
  
  arg1 = (std::vector< SingleSourcePipeline > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSingleSourcePipeline_Add(void * jarg1, void * jarg2) {
  std::vector< SingleSourcePipeline > *arg1 = (std::vector< SingleSourcePipeline > *) 0 ;
  SingleSourcePipeline *arg2 = 0 ;
  
  arg1 = (std::vector< SingleSourcePipeline > *)jarg1; 
  arg2 = (SingleSourcePipeline *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SingleSourcePipeline const & is null", 0);
    return ;
  } 
  (arg1)->push_back((SingleSourcePipeline const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorSingleSourcePipeline_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< SingleSourcePipeline > *arg1 = (std::vector< SingleSourcePipeline > *) 0 ;
  std::vector< SingleSourcePipeline >::size_type result;
  
  arg1 = (std::vector< SingleSourcePipeline > *)jarg1; 
  result = ((std::vector< SingleSourcePipeline > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorSingleSourcePipeline_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< SingleSourcePipeline > *arg1 = (std::vector< SingleSourcePipeline > *) 0 ;
  bool result;
  
  arg1 = (std::vector< SingleSourcePipeline > *)jarg1; 
  result = (bool)((std::vector< SingleSourcePipeline > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorSingleSourcePipeline_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< SingleSourcePipeline > *arg1 = (std::vector< SingleSourcePipeline > *) 0 ;
  std::vector< SingleSourcePipeline >::size_type result;
  
  arg1 = (std::vector< SingleSourcePipeline > *)jarg1; 
  result = ((std::vector< SingleSourcePipeline > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSingleSourcePipeline_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< SingleSourcePipeline > *arg1 = (std::vector< SingleSourcePipeline > *) 0 ;
  std::vector< SingleSourcePipeline >::size_type arg2 ;
  
  arg1 = (std::vector< SingleSourcePipeline > *)jarg1; 
  arg2 = (std::vector< SingleSourcePipeline >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorSingleSourcePipeline__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< SingleSourcePipeline > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< SingleSourcePipeline > *)new_std_vector_Sl_SingleSourcePipeline_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorSingleSourcePipeline_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< SingleSourcePipeline > *arg1 = (std::vector< SingleSourcePipeline > *) 0 ;
  int arg2 ;
  SingleSourcePipeline result;
  
  arg1 = (std::vector< SingleSourcePipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_SingleSourcePipeline_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new SingleSourcePipeline(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorSingleSourcePipeline_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< SingleSourcePipeline > *arg1 = (std::vector< SingleSourcePipeline > *) 0 ;
  int arg2 ;
  std::vector< SingleSourcePipeline >::value_type *result = 0 ;
  
  arg1 = (std::vector< SingleSourcePipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< SingleSourcePipeline >::value_type *) &std_vector_Sl_SingleSourcePipeline_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSingleSourcePipeline_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SingleSourcePipeline > *arg1 = (std::vector< SingleSourcePipeline > *) 0 ;
  int arg2 ;
  SingleSourcePipeline *arg3 = 0 ;
  
  arg1 = (std::vector< SingleSourcePipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (SingleSourcePipeline *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SingleSourcePipeline const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SingleSourcePipeline_Sg__setitem(arg1,arg2,(SingleSourcePipeline const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSingleSourcePipeline_AddRange(void * jarg1, void * jarg2) {
  std::vector< SingleSourcePipeline > *arg1 = (std::vector< SingleSourcePipeline > *) 0 ;
  std::vector< SingleSourcePipeline > *arg2 = 0 ;
  
  arg1 = (std::vector< SingleSourcePipeline > *)jarg1; 
  arg2 = (std::vector< SingleSourcePipeline > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SingleSourcePipeline > const & is null", 0);
    return ;
  } 
  std_vector_Sl_SingleSourcePipeline_Sg__AddRange(arg1,(std::vector< SingleSourcePipeline > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorSingleSourcePipeline_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< SingleSourcePipeline > *arg1 = (std::vector< SingleSourcePipeline > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< SingleSourcePipeline > *result = 0 ;
  
  arg1 = (std::vector< SingleSourcePipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< SingleSourcePipeline > *)std_vector_Sl_SingleSourcePipeline_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSingleSourcePipeline_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SingleSourcePipeline > *arg1 = (std::vector< SingleSourcePipeline > *) 0 ;
  int arg2 ;
  SingleSourcePipeline *arg3 = 0 ;
  
  arg1 = (std::vector< SingleSourcePipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (SingleSourcePipeline *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SingleSourcePipeline const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SingleSourcePipeline_Sg__Insert(arg1,arg2,(SingleSourcePipeline const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSingleSourcePipeline_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SingleSourcePipeline > *arg1 = (std::vector< SingleSourcePipeline > *) 0 ;
  int arg2 ;
  std::vector< SingleSourcePipeline > *arg3 = 0 ;
  
  arg1 = (std::vector< SingleSourcePipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< SingleSourcePipeline > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SingleSourcePipeline > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SingleSourcePipeline_Sg__InsertRange(arg1,arg2,(std::vector< SingleSourcePipeline > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSingleSourcePipeline_RemoveAt(void * jarg1, int jarg2) {
  std::vector< SingleSourcePipeline > *arg1 = (std::vector< SingleSourcePipeline > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< SingleSourcePipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_SingleSourcePipeline_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSingleSourcePipeline_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< SingleSourcePipeline > *arg1 = (std::vector< SingleSourcePipeline > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< SingleSourcePipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_SingleSourcePipeline_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorSingleSourcePipeline_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  SingleSourcePipeline *arg1 = 0 ;
  int arg2 ;
  std::vector< SingleSourcePipeline > *result = 0 ;
  
  arg1 = (SingleSourcePipeline *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SingleSourcePipeline const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< SingleSourcePipeline > *)std_vector_Sl_SingleSourcePipeline_Sg__Repeat((SingleSourcePipeline const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSingleSourcePipeline_Reverse__SWIG_0(void * jarg1) {
  std::vector< SingleSourcePipeline > *arg1 = (std::vector< SingleSourcePipeline > *) 0 ;
  
  arg1 = (std::vector< SingleSourcePipeline > *)jarg1; 
  std_vector_Sl_SingleSourcePipeline_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSingleSourcePipeline_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< SingleSourcePipeline > *arg1 = (std::vector< SingleSourcePipeline > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< SingleSourcePipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_SingleSourcePipeline_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSingleSourcePipeline_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SingleSourcePipeline > *arg1 = (std::vector< SingleSourcePipeline > *) 0 ;
  int arg2 ;
  std::vector< SingleSourcePipeline > *arg3 = 0 ;
  
  arg1 = (std::vector< SingleSourcePipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< SingleSourcePipeline > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SingleSourcePipeline > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SingleSourcePipeline_Sg__SetRange(arg1,arg2,(std::vector< SingleSourcePipeline > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorSingleSourcePipeline(void * jarg1) {
  std::vector< SingleSourcePipeline > *arg1 = (std::vector< SingleSourcePipeline > *) 0 ;
  
  arg1 = (std::vector< SingleSourcePipeline > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorIPipeline__SWIG_0() {
  void * jresult ;
  std::vector< IPipeline > *result = 0 ;
  
  result = (std::vector< IPipeline > *)new std::vector< IPipeline >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorIPipeline__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< IPipeline > *arg1 = 0 ;
  std::vector< IPipeline > *result = 0 ;
  
  arg1 = (std::vector< IPipeline > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< IPipeline > const & is null", 0);
    return 0;
  } 
  result = (std::vector< IPipeline > *)new std::vector< IPipeline >((std::vector< IPipeline > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIPipeline_Clear(void * jarg1) {
  std::vector< IPipeline > *arg1 = (std::vector< IPipeline > *) 0 ;
  
  arg1 = (std::vector< IPipeline > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIPipeline_Add(void * jarg1, void * jarg2) {
  std::vector< IPipeline > *arg1 = (std::vector< IPipeline > *) 0 ;
  IPipeline *arg2 = 0 ;
  
  arg1 = (std::vector< IPipeline > *)jarg1; 
  arg2 = (IPipeline *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IPipeline const & is null", 0);
    return ;
  } 
  (arg1)->push_back((IPipeline const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorIPipeline_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< IPipeline > *arg1 = (std::vector< IPipeline > *) 0 ;
  std::vector< IPipeline >::size_type result;
  
  arg1 = (std::vector< IPipeline > *)jarg1; 
  result = ((std::vector< IPipeline > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorIPipeline_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< IPipeline > *arg1 = (std::vector< IPipeline > *) 0 ;
  bool result;
  
  arg1 = (std::vector< IPipeline > *)jarg1; 
  result = (bool)((std::vector< IPipeline > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorIPipeline_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< IPipeline > *arg1 = (std::vector< IPipeline > *) 0 ;
  std::vector< IPipeline >::size_type result;
  
  arg1 = (std::vector< IPipeline > *)jarg1; 
  result = ((std::vector< IPipeline > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIPipeline_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< IPipeline > *arg1 = (std::vector< IPipeline > *) 0 ;
  std::vector< IPipeline >::size_type arg2 ;
  
  arg1 = (std::vector< IPipeline > *)jarg1; 
  arg2 = (std::vector< IPipeline >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorIPipeline__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< IPipeline > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< IPipeline > *)new_std_vector_Sl_IPipeline_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorIPipeline_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< IPipeline > *arg1 = (std::vector< IPipeline > *) 0 ;
  int arg2 ;
  IPipeline result;
  
  arg1 = (std::vector< IPipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_IPipeline_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new IPipeline(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorIPipeline_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< IPipeline > *arg1 = (std::vector< IPipeline > *) 0 ;
  int arg2 ;
  std::vector< IPipeline >::value_type *result = 0 ;
  
  arg1 = (std::vector< IPipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< IPipeline >::value_type *) &std_vector_Sl_IPipeline_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIPipeline_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< IPipeline > *arg1 = (std::vector< IPipeline > *) 0 ;
  int arg2 ;
  IPipeline *arg3 = 0 ;
  
  arg1 = (std::vector< IPipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (IPipeline *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IPipeline const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_IPipeline_Sg__setitem(arg1,arg2,(IPipeline const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIPipeline_AddRange(void * jarg1, void * jarg2) {
  std::vector< IPipeline > *arg1 = (std::vector< IPipeline > *) 0 ;
  std::vector< IPipeline > *arg2 = 0 ;
  
  arg1 = (std::vector< IPipeline > *)jarg1; 
  arg2 = (std::vector< IPipeline > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< IPipeline > const & is null", 0);
    return ;
  } 
  std_vector_Sl_IPipeline_Sg__AddRange(arg1,(std::vector< IPipeline > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorIPipeline_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< IPipeline > *arg1 = (std::vector< IPipeline > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< IPipeline > *result = 0 ;
  
  arg1 = (std::vector< IPipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< IPipeline > *)std_vector_Sl_IPipeline_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIPipeline_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< IPipeline > *arg1 = (std::vector< IPipeline > *) 0 ;
  int arg2 ;
  IPipeline *arg3 = 0 ;
  
  arg1 = (std::vector< IPipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (IPipeline *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IPipeline const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_IPipeline_Sg__Insert(arg1,arg2,(IPipeline const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIPipeline_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< IPipeline > *arg1 = (std::vector< IPipeline > *) 0 ;
  int arg2 ;
  std::vector< IPipeline > *arg3 = 0 ;
  
  arg1 = (std::vector< IPipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< IPipeline > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< IPipeline > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_IPipeline_Sg__InsertRange(arg1,arg2,(std::vector< IPipeline > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIPipeline_RemoveAt(void * jarg1, int jarg2) {
  std::vector< IPipeline > *arg1 = (std::vector< IPipeline > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< IPipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_IPipeline_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIPipeline_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< IPipeline > *arg1 = (std::vector< IPipeline > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< IPipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_IPipeline_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorIPipeline_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  IPipeline *arg1 = 0 ;
  int arg2 ;
  std::vector< IPipeline > *result = 0 ;
  
  arg1 = (IPipeline *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IPipeline const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< IPipeline > *)std_vector_Sl_IPipeline_Sg__Repeat((IPipeline const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIPipeline_Reverse__SWIG_0(void * jarg1) {
  std::vector< IPipeline > *arg1 = (std::vector< IPipeline > *) 0 ;
  
  arg1 = (std::vector< IPipeline > *)jarg1; 
  std_vector_Sl_IPipeline_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIPipeline_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< IPipeline > *arg1 = (std::vector< IPipeline > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< IPipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_IPipeline_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorIPipeline_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< IPipeline > *arg1 = (std::vector< IPipeline > *) 0 ;
  int arg2 ;
  std::vector< IPipeline > *arg3 = 0 ;
  
  arg1 = (std::vector< IPipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< IPipeline > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< IPipeline > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_IPipeline_Sg__SetRange(arg1,arg2,(std::vector< IPipeline > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorIPipeline(void * jarg1) {
  std::vector< IPipeline > *arg1 = (std::vector< IPipeline > *) 0 ;
  
  arg1 = (std::vector< IPipeline > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorSterioPipeline__SWIG_0() {
  void * jresult ;
  std::vector< SterioPipeline > *result = 0 ;
  
  result = (std::vector< SterioPipeline > *)new std::vector< SterioPipeline >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorSterioPipeline__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< SterioPipeline > *arg1 = 0 ;
  std::vector< SterioPipeline > *result = 0 ;
  
  arg1 = (std::vector< SterioPipeline > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SterioPipeline > const & is null", 0);
    return 0;
  } 
  result = (std::vector< SterioPipeline > *)new std::vector< SterioPipeline >((std::vector< SterioPipeline > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSterioPipeline_Clear(void * jarg1) {
  std::vector< SterioPipeline > *arg1 = (std::vector< SterioPipeline > *) 0 ;
  
  arg1 = (std::vector< SterioPipeline > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSterioPipeline_Add(void * jarg1, void * jarg2) {
  std::vector< SterioPipeline > *arg1 = (std::vector< SterioPipeline > *) 0 ;
  SterioPipeline *arg2 = 0 ;
  
  arg1 = (std::vector< SterioPipeline > *)jarg1; 
  arg2 = (SterioPipeline *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SterioPipeline const & is null", 0);
    return ;
  } 
  (arg1)->push_back((SterioPipeline const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorSterioPipeline_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< SterioPipeline > *arg1 = (std::vector< SterioPipeline > *) 0 ;
  std::vector< SterioPipeline >::size_type result;
  
  arg1 = (std::vector< SterioPipeline > *)jarg1; 
  result = ((std::vector< SterioPipeline > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorSterioPipeline_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< SterioPipeline > *arg1 = (std::vector< SterioPipeline > *) 0 ;
  bool result;
  
  arg1 = (std::vector< SterioPipeline > *)jarg1; 
  result = (bool)((std::vector< SterioPipeline > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorSterioPipeline_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< SterioPipeline > *arg1 = (std::vector< SterioPipeline > *) 0 ;
  std::vector< SterioPipeline >::size_type result;
  
  arg1 = (std::vector< SterioPipeline > *)jarg1; 
  result = ((std::vector< SterioPipeline > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSterioPipeline_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< SterioPipeline > *arg1 = (std::vector< SterioPipeline > *) 0 ;
  std::vector< SterioPipeline >::size_type arg2 ;
  
  arg1 = (std::vector< SterioPipeline > *)jarg1; 
  arg2 = (std::vector< SterioPipeline >::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorSterioPipeline__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< SterioPipeline > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< SterioPipeline > *)new_std_vector_Sl_SterioPipeline_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorSterioPipeline_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< SterioPipeline > *arg1 = (std::vector< SterioPipeline > *) 0 ;
  int arg2 ;
  SterioPipeline result;
  
  arg1 = (std::vector< SterioPipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_SterioPipeline_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new SterioPipeline(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorSterioPipeline_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< SterioPipeline > *arg1 = (std::vector< SterioPipeline > *) 0 ;
  int arg2 ;
  std::vector< SterioPipeline >::value_type *result = 0 ;
  
  arg1 = (std::vector< SterioPipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< SterioPipeline >::value_type *) &std_vector_Sl_SterioPipeline_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSterioPipeline_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SterioPipeline > *arg1 = (std::vector< SterioPipeline > *) 0 ;
  int arg2 ;
  SterioPipeline *arg3 = 0 ;
  
  arg1 = (std::vector< SterioPipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (SterioPipeline *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SterioPipeline const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SterioPipeline_Sg__setitem(arg1,arg2,(SterioPipeline const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSterioPipeline_AddRange(void * jarg1, void * jarg2) {
  std::vector< SterioPipeline > *arg1 = (std::vector< SterioPipeline > *) 0 ;
  std::vector< SterioPipeline > *arg2 = 0 ;
  
  arg1 = (std::vector< SterioPipeline > *)jarg1; 
  arg2 = (std::vector< SterioPipeline > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SterioPipeline > const & is null", 0);
    return ;
  } 
  std_vector_Sl_SterioPipeline_Sg__AddRange(arg1,(std::vector< SterioPipeline > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorSterioPipeline_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< SterioPipeline > *arg1 = (std::vector< SterioPipeline > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< SterioPipeline > *result = 0 ;
  
  arg1 = (std::vector< SterioPipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< SterioPipeline > *)std_vector_Sl_SterioPipeline_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSterioPipeline_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SterioPipeline > *arg1 = (std::vector< SterioPipeline > *) 0 ;
  int arg2 ;
  SterioPipeline *arg3 = 0 ;
  
  arg1 = (std::vector< SterioPipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (SterioPipeline *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SterioPipeline const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SterioPipeline_Sg__Insert(arg1,arg2,(SterioPipeline const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSterioPipeline_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SterioPipeline > *arg1 = (std::vector< SterioPipeline > *) 0 ;
  int arg2 ;
  std::vector< SterioPipeline > *arg3 = 0 ;
  
  arg1 = (std::vector< SterioPipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< SterioPipeline > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SterioPipeline > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SterioPipeline_Sg__InsertRange(arg1,arg2,(std::vector< SterioPipeline > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSterioPipeline_RemoveAt(void * jarg1, int jarg2) {
  std::vector< SterioPipeline > *arg1 = (std::vector< SterioPipeline > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< SterioPipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_SterioPipeline_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSterioPipeline_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< SterioPipeline > *arg1 = (std::vector< SterioPipeline > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< SterioPipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_SterioPipeline_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorSterioPipeline_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  SterioPipeline *arg1 = 0 ;
  int arg2 ;
  std::vector< SterioPipeline > *result = 0 ;
  
  arg1 = (SterioPipeline *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SterioPipeline const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< SterioPipeline > *)std_vector_Sl_SterioPipeline_Sg__Repeat((SterioPipeline const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSterioPipeline_Reverse__SWIG_0(void * jarg1) {
  std::vector< SterioPipeline > *arg1 = (std::vector< SterioPipeline > *) 0 ;
  
  arg1 = (std::vector< SterioPipeline > *)jarg1; 
  std_vector_Sl_SterioPipeline_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSterioPipeline_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< SterioPipeline > *arg1 = (std::vector< SterioPipeline > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< SterioPipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_SterioPipeline_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorSterioPipeline_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< SterioPipeline > *arg1 = (std::vector< SterioPipeline > *) 0 ;
  int arg2 ;
  std::vector< SterioPipeline > *arg3 = 0 ;
  
  arg1 = (std::vector< SterioPipeline > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< SterioPipeline > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< SterioPipeline > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_SterioPipeline_Sg__SetRange(arg1,arg2,(std::vector< SterioPipeline > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorSterioPipeline(void * jarg1) {
  std::vector< SterioPipeline > *arg1 = (std::vector< SterioPipeline > *) 0 ;
  
  arg1 = (std::vector< SterioPipeline > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Log(int jarg1, const char * jarg2) {
  void * jresult ;
  LogLevel arg1 ;
  std::string arg2 ;
  Log *result = 0 ;
  
  arg1 = (LogLevel)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (Log *)new Log(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Log_GetLogLevel(void * jarg1) {
  int jresult ;
  Log *arg1 = (Log *) 0 ;
  LogLevel result;
  
  arg1 = (Log *)jarg1; 
  result = (LogLevel)((Log const *)arg1)->GetLogLevel();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Log_GetMessage(void * jarg1) {
  const char * jresult ;
  Log *arg1 = (Log *) 0 ;
  std::string result;
  
  arg1 = (Log *)jarg1; 
  result = ((Log const *)arg1)->GetMessage();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Log(void * jarg1) {
  Log *arg1 = (Log *) 0 ;
  
  arg1 = (Log *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Logger() {
  void * jresult ;
  Logger *result = 0 ;
  
  result = (Logger *)new Logger();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Logger(void * jarg1) {
  Logger *arg1 = (Logger *) 0 ;
  
  arg1 = (Logger *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Logger_enterLog__SWIG_0(void * jarg1, const char * jarg2) {
  Logger *arg1 = (Logger *) 0 ;
  std::string arg2 ;
  
  arg1 = (Logger *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->enterLog(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void SWIGSTDCALL CSharp_Logger_enterLog__SWIG_1(void * jarg1, int jarg2, const char * jarg3) {
  Logger *arg1 = (Logger *) 0 ;
  LogLevel arg2 ;
  std::string arg3 ;
  
  arg1 = (Logger *)jarg1; 
  arg2 = (LogLevel)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->enterLog(arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_Logger_enterLog__SWIG_2(void * jarg1, void * jarg2) {
  Logger *arg1 = (Logger *) 0 ;
  SwigValueWrapper< Log > arg2 ;
  Log *argp2 ;
  
  arg1 = (Logger *)jarg1; 
  argp2 = (Log *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Log", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->enterLog(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Logger_GetAllLogs(void * jarg1) {
  void * jresult ;
  Logger *arg1 = (Logger *) 0 ;
  std::vector< Log > result;
  
  arg1 = (Logger *)jarg1; 
  result = (arg1)->GetAllLogs();
  jresult = new std::vector< Log >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Logger_GetCertainLogs(void * jarg1, int jarg2) {
  void * jresult ;
  Logger *arg1 = (Logger *) 0 ;
  LogLevel arg2 ;
  std::vector< Log > result;
  
  arg1 = (Logger *)jarg1; 
  arg2 = (LogLevel)jarg2; 
  result = (arg1)->GetCertainLogs(arg2);
  jresult = new std::vector< Log >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Logger_clearAllLogs(void * jarg1) {
  Logger *arg1 = (Logger *) 0 ;
  
  arg1 = (Logger *)jarg1; 
  (arg1)->clearAllLogs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IFrameSource(void * jarg1) {
  IFrameSource *arg1 = (IFrameSource *) 0 ;
  
  arg1 = (IFrameSource *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IFrameSource_getFrame(void * jarg1) {
  void * jresult ;
  IFrameSource *arg1 = (IFrameSource *) 0 ;
  Frame *result = 0 ;
  
  arg1 = (IFrameSource *)jarg1; 
  result = (Frame *)(arg1)->getFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImageFileFrameSource(const char * jarg1, void * jarg2) {
  void * jresult ;
  std::string arg1 ;
  Logger *arg2 = (Logger *) 0 ;
  ImageFileFrameSource *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  arg2 = (Logger *)jarg2; 
  result = (ImageFileFrameSource *)new ImageFileFrameSource(SWIG_STD_MOVE(arg1),arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageFileFrameSource_getFrame(void * jarg1) {
  void * jresult ;
  ImageFileFrameSource *arg1 = (ImageFileFrameSource *) 0 ;
  Frame *result = 0 ;
  
  arg1 = (ImageFileFrameSource *)jarg1; 
  result = (Frame *)(arg1)->getFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImageFileFrameSource(void * jarg1) {
  ImageFileFrameSource *arg1 = (ImageFileFrameSource *) 0 ;
  
  arg1 = (ImageFileFrameSource *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoFileFrameSource(void * jarg1, const char * jarg2, void * jarg3) {
  void * jresult ;
  Logger *arg1 = (Logger *) 0 ;
  std::string arg2 ;
  FramePool *arg3 = (FramePool *) 0 ;
  VideoFileFrameSource *result = 0 ;
  
  arg1 = (Logger *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (FramePool *)jarg3; 
  result = (VideoFileFrameSource *)new VideoFileFrameSource(arg1,SWIG_STD_MOVE(arg2),arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoFileFrameSource_getFrame(void * jarg1) {
  void * jresult ;
  VideoFileFrameSource *arg1 = (VideoFileFrameSource *) 0 ;
  Frame *result = 0 ;
  
  arg1 = (VideoFileFrameSource *)jarg1; 
  result = (Frame *)(arg1)->getFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VideoFileFrameSource(void * jarg1) {
  VideoFileFrameSource *arg1 = (VideoFileFrameSource *) 0 ;
  
  arg1 = (VideoFileFrameSource *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CameraFrameSource__SWIG_0(const char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  std::string arg1 ;
  Logger *arg2 = (Logger *) 0 ;
  FramePool *arg3 = (FramePool *) 0 ;
  CameraFrameSource *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  arg2 = (Logger *)jarg2; 
  arg3 = (FramePool *)jarg3; 
  result = (CameraFrameSource *)new CameraFrameSource(SWIG_STD_MOVE(arg1),arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CameraFrameSource__SWIG_1(const char * jarg1, const char * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  std::string arg1 ;
  std::string arg2 ;
  Logger *arg3 = (Logger *) 0 ;
  FramePool *arg4 = (FramePool *) 0 ;
  CameraFrameSource *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (Logger *)jarg3; 
  arg4 = (FramePool *)jarg4; 
  result = (CameraFrameSource *)new CameraFrameSource(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CameraFrameSource(void * jarg1) {
  CameraFrameSource *arg1 = (CameraFrameSource *) 0 ;
  
  arg1 = (CameraFrameSource *)jarg1; 
  delete arg1;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_CameraFrameSource_getDevicePath(void * jarg1) {
  const char * jresult ;
  CameraFrameSource *arg1 = (CameraFrameSource *) 0 ;
  std::string result;
  
  arg1 = (CameraFrameSource *)jarg1; 
  result = (arg1)->getDevicePath();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_CameraFrameSource_getDeviceName(void * jarg1) {
  const char * jresult ;
  CameraFrameSource *arg1 = (CameraFrameSource *) 0 ;
  std::string result;
  
  arg1 = (CameraFrameSource *)jarg1; 
  result = (arg1)->getDeviceName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CameraFrameSource_changeDeviceName(void * jarg1, const char * jarg2) {
  CameraFrameSource *arg1 = (CameraFrameSource *) 0 ;
  std::string arg2 ;
  
  arg1 = (CameraFrameSource *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->changeDeviceName(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CameraFrameSource_getFrame(void * jarg1) {
  void * jresult ;
  CameraFrameSource *arg1 = (CameraFrameSource *) 0 ;
  Frame *result = 0 ;
  
  arg1 = (CameraFrameSource *)jarg1; 
  result = (Frame *)(arg1)->getFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_enumerateCameras() {
  void * jresult ;
  std::vector< CameraFrameSource > result;
  
  result = enumerateCameras();
  jresult = new std::vector< CameraFrameSource >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FramePool(void * jarg1, void * jarg2) {
  void * jresult ;
  std::vector< FrameSpec > arg1 ;
  Logger *arg2 = (Logger *) 0 ;
  std::vector< FrameSpec > *argp1 ;
  FramePool *result = 0 ;
  
  argp1 = (std::vector< FrameSpec > *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< FrameSpec >", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (Logger *)jarg2; 
  result = (FramePool *)new FramePool(SWIG_STD_MOVE(arg1),arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FramePool(void * jarg1) {
  FramePool *arg1 = (FramePool *) 0 ;
  
  arg1 = (FramePool *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FramePool_getCachedFrameCount(void * jarg1) {
  int jresult ;
  FramePool *arg1 = (FramePool *) 0 ;
  int result;
  
  arg1 = (FramePool *)jarg1; 
  result = (int)(arg1)->getCachedFrameCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FramePool_getFrame(void * jarg1, void * jarg2) {
  void * jresult ;
  FramePool *arg1 = (FramePool *) 0 ;
  SwigValueWrapper< FrameSpec > arg2 ;
  FrameSpec *argp2 ;
  Frame *result = 0 ;
  
  arg1 = (FramePool *)jarg1; 
  argp2 = (FrameSpec *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null FrameSpec", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Frame *)(arg1)->getFrame(SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FramePool_returnFrame(void * jarg1, void * jarg2) {
  FramePool *arg1 = (FramePool *) 0 ;
  Frame *arg2 = (Frame *) 0 ;
  
  arg1 = (FramePool *)jarg1; 
  arg2 = (Frame *)jarg2; 
  (arg1)->returnFrame(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Frame__SWIG_0() {
  void * jresult ;
  Frame *result = 0 ;
  
  result = (Frame *)new Frame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Frame__SWIG_1(void * jarg1) {
  void * jresult ;
  SwigValueWrapper< FrameSpec > arg1 ;
  FrameSpec *argp1 ;
  Frame *result = 0 ;
  
  argp1 = (FrameSpec *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null FrameSpec", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (Frame *)new Frame(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Frame(void * jarg1) {
  Frame *arg1 = (Frame *) 0 ;
  
  arg1 = (Frame *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Frame_isIdentical(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Frame *arg1 = (Frame *) 0 ;
  SwigValueWrapper< FrameSpec > arg2 ;
  FrameSpec *argp2 ;
  bool result;
  
  arg1 = (Frame *)jarg1; 
  argp2 = (FrameSpec *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null FrameSpec", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->isIdentical(SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Frame_getSpec(void * jarg1) {
  void * jresult ;
  Frame *arg1 = (Frame *) 0 ;
  SwigValueWrapper< FrameSpec > result;
  
  arg1 = (Frame *)jarg1; 
  result = (arg1)->getSpec();
  jresult = new FrameSpec(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FrameSpec(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  FrameSpec *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (FrameSpec *)new FrameSpec(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FrameSpec(void * jarg1) {
  FrameSpec *arg1 = (FrameSpec *) 0 ;
  
  arg1 = (FrameSpec *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FrameSpec_getHeight(void * jarg1) {
  int jresult ;
  FrameSpec *arg1 = (FrameSpec *) 0 ;
  int result;
  
  arg1 = (FrameSpec *)jarg1; 
  result = (int)((FrameSpec const *)arg1)->getHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FrameSpec_setHeight(void * jarg1, int jarg2) {
  FrameSpec *arg1 = (FrameSpec *) 0 ;
  int arg2 ;
  
  arg1 = (FrameSpec *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setHeight(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_FrameSpec_getWidth(void * jarg1) {
  int jresult ;
  FrameSpec *arg1 = (FrameSpec *) 0 ;
  int result;
  
  arg1 = (FrameSpec *)jarg1; 
  result = (int)((FrameSpec const *)arg1)->getWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FrameSpec_setWidth(void * jarg1, int jarg2) {
  FrameSpec *arg1 = (FrameSpec *) 0 ;
  int arg2 ;
  
  arg1 = (FrameSpec *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setWidth(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_FrameSpec_getType(void * jarg1) {
  int jresult ;
  FrameSpec *arg1 = (FrameSpec *) 0 ;
  int result;
  
  arg1 = (FrameSpec *)jarg1; 
  result = (int)((FrameSpec const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FrameSpec_setType(void * jarg1, int jarg2) {
  FrameSpec *arg1 = (FrameSpec *) 0 ;
  int arg2 ;
  
  arg1 = (FrameSpec *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ApriltagDetection(void * jarg1, void * jarg2) {
  void * jresult ;
  apriltag_detection_t arg1 ;
  apriltag_pose_t arg2 ;
  apriltag_detection_t *argp1 ;
  apriltag_pose_t *argp2 ;
  ApriltagDetection *result = 0 ;
  
  argp1 = (apriltag_detection_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null apriltag_detection_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (apriltag_pose_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null apriltag_pose_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ApriltagDetection *)new ApriltagDetection(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ApriltagDetection(void * jarg1) {
  ApriltagDetection *arg1 = (ApriltagDetection *) 0 ;
  
  arg1 = (ApriltagDetection *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ApriltagSink(void * jarg1) {
  void * jresult ;
  Logger *arg1 = (Logger *) 0 ;
  ApriltagSink *result = 0 ;
  
  arg1 = (Logger *)jarg1; 
  result = (ApriltagSink *)new ApriltagSink(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ApriltagSink(void * jarg1) {
  ApriltagSink *arg1 = (ApriltagSink *) 0 ;
  
  arg1 = (ApriltagSink *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ApriltagSink_getResults(void * jarg1, void * jarg2) {
  void * jresult ;
  ApriltagSink *arg1 = (ApriltagSink *) 0 ;
  Frame *arg2 = (Frame *) 0 ;
  std::vector< ApriltagDetection > result;
  
  arg1 = (ApriltagSink *)jarg1; 
  arg2 = (Frame *)jarg2; 
  result = (arg1)->getResults(arg2);
  jresult = new std::vector< ApriltagDetection >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IObjectDetectionSink() {
  void * jresult ;
  IObjectDetectionSink *result = 0 ;
  
  result = (IObjectDetectionSink *)new IObjectDetectionSink();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IObjectDetectionSink(void * jarg1) {
  IObjectDetectionSink *arg1 = (IObjectDetectionSink *) 0 ;
  
  arg1 = (IObjectDetectionSink *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RknnSink() {
  void * jresult ;
  RknnSink *result = 0 ;
  
  result = (RknnSink *)new RknnSink();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RknnSink(void * jarg1) {
  RknnSink *arg1 = (RknnSink *) 0 ;
  
  arg1 = (RknnSink *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TRTSink() {
  void * jresult ;
  TRTSink *result = 0 ;
  
  result = (TRTSink *)new TRTSink();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TRTSink(void * jarg1) {
  TRTSink *arg1 = (TRTSink *) 0 ;
  
  arg1 = (TRTSink *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PreProcessor(void * jarg1) {
  void * jresult ;
  FramePool *arg1 = (FramePool *) 0 ;
  PreProcessor *result = 0 ;
  
  arg1 = (FramePool *)jarg1; 
  result = (PreProcessor *)new PreProcessor(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PreProcessor(void * jarg1) {
  PreProcessor *arg1 = (PreProcessor *) 0 ;
  
  arg1 = (PreProcessor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PreProcessor_transformFrame(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  PreProcessor *arg1 = (PreProcessor *) 0 ;
  Frame *arg2 = (Frame *) 0 ;
  SwigValueWrapper< FrameSpec > arg3 ;
  FrameSpec *argp3 ;
  Frame *result = 0 ;
  
  arg1 = (PreProcessor *)jarg1; 
  arg2 = (Frame *)jarg2; 
  argp3 = (FrameSpec *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null FrameSpec", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (Frame *)(arg1)->transformFrame(arg2,SWIG_STD_MOVE(arg3));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SterioPipeline() {
  void * jresult ;
  SterioPipeline *result = 0 ;
  
  result = (SterioPipeline *)new SterioPipeline();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SterioPipeline(void * jarg1) {
  SterioPipeline *arg1 = (SterioPipeline *) 0 ;
  
  arg1 = (SterioPipeline *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ApriltagDetectionPipeline(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  IFrameSource *arg1 = (IFrameSource *) 0 ;
  ISink< ApriltagDetection > *arg2 = (ISink< ApriltagDetection > *) 0 ;
  Logger *arg3 = (Logger *) 0 ;
  SingleSourcePipeline< ApriltagDetection > *result = 0 ;
  
  arg1 = (IFrameSource *)jarg1; 
  arg2 = (ISink< ApriltagDetection > *)jarg2; 
  arg3 = (Logger *)jarg3; 
  result = (SingleSourcePipeline< ApriltagDetection > *)new SingleSourcePipeline< ApriltagDetection >(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ApriltagDetectionPipeline(void * jarg1) {
  SingleSourcePipeline< ApriltagDetection > *arg1 = (SingleSourcePipeline< ApriltagDetection > *) 0 ;
  
  arg1 = (SingleSourcePipeline< ApriltagDetection > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ApriltagDetectionPipeline_getResults(void * jarg1) {
  void * jresult ;
  SingleSourcePipeline< ApriltagDetection > *arg1 = (SingleSourcePipeline< ApriltagDetection > *) 0 ;
  std::vector< ApriltagDetection > *result = 0 ;
  
  arg1 = (SingleSourcePipeline< ApriltagDetection > *)jarg1; 
  result = (std::vector< ApriltagDetection > *)(arg1)->getResults();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT IFrameSource * SWIGSTDCALL CSharp_ImageFileFrameSource_SWIGUpcast(ImageFileFrameSource *jarg1) {
    return (IFrameSource *)jarg1;
}

SWIGEXPORT IFrameSource * SWIGSTDCALL CSharp_VideoFileFrameSource_SWIGUpcast(VideoFileFrameSource *jarg1) {
    return (IFrameSource *)jarg1;
}

#ifdef __cplusplus
}
#endif

